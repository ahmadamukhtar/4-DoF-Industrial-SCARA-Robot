
Ahsan45.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003414  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003520  08003520  00013520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003594  08003594  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08003594  08003594  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003594  08003594  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003594  08003594  00013594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003598  08003598  00013598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800359c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000080  0800361c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  0800361c  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097c9  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017c8  00000000  00000000  00029872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  0002b040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae8  00000000  00000000  0002bbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d1a  00000000  00000000  0002c6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b451  00000000  00000000  000433c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088098  00000000  00000000  0004e813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d68ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035a0  00000000  00000000  000d68fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08003508 	.word	0x08003508

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08003508 	.word	0x08003508

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08e      	sub	sp, #56	; 0x38
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t message[50] = {'\0'};
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	f107 0308 	add.w	r3, r7, #8
 800074e:	222e      	movs	r2, #46	; 0x2e
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f002 fa56 	bl	8002c04 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000758:	f000 fc1e 	bl	8000f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075c:	f000 f89e 	bl	800089c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000760:	f000 f9c4 	bl	8000aec <MX_GPIO_Init>
  MX_TIM2_Init();
 8000764:	f000 f8e0 	bl	8000928 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000768:	f000 f996 	bl	8000a98 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800076c:	f000 f930 	bl	80009d0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000770:	213c      	movs	r1, #60	; 0x3c
 8000772:	4841      	ldr	r0, [pc, #260]	; (8000878 <main+0x138>)
 8000774:	f001 fcac 	bl	80020d0 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000778:	2100      	movs	r1, #0
 800077a:	4840      	ldr	r0, [pc, #256]	; (800087c <main+0x13c>)
 800077c:	f001 fb64 	bl	8001e48 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000780:	2104      	movs	r1, #4
 8000782:	483e      	ldr	r0, [pc, #248]	; (800087c <main+0x13c>)
 8000784:	f001 fb60 	bl	8001e48 <HAL_TIM_PWM_Start>
  TIM3->CCR2 = 0;
 8000788:	4b3d      	ldr	r3, [pc, #244]	; (8000880 <main+0x140>)
 800078a:	2200      	movs	r2, #0
 800078c:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3->CCR1 = 0;
 800078e:	4b3c      	ldr	r3, [pc, #240]	; (8000880 <main+0x140>)
 8000790:	2200      	movs	r2, #0
 8000792:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CNT=32768;
 8000794:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000798:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800079c:	625a      	str	r2, [r3, #36]	; 0x24
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  enc01=((TIM2->CNT));
 800079e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b37      	ldr	r3, [pc, #220]	; (8000884 <main+0x144>)
 80007a8:	601a      	str	r2, [r3, #0]
	  TIM2->CNT=32768;
 80007aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007b2:	625a      	str	r2, [r3, #36]	; 0x24
	  motorPosition=motorPosition+(enc01-32768);
 80007b4:	4b33      	ldr	r3, [pc, #204]	; (8000884 <main+0x144>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f5a3 4200 	sub.w	r2, r3, #32768	; 0x8000
 80007bc:	4b32      	ldr	r3, [pc, #200]	; (8000888 <main+0x148>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4413      	add	r3, r2
 80007c2:	4a31      	ldr	r2, [pc, #196]	; (8000888 <main+0x148>)
 80007c4:	6013      	str	r3, [r2, #0]
	  //motorPosition=((TIM2->CNT));

	  //motorPosition=14;

//controlSignal=154;
	                sprintf(message, "Encoder Ticks = %d\n\r",motorPosition);
 80007c6:	4b30      	ldr	r3, [pc, #192]	; (8000888 <main+0x148>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	492f      	ldr	r1, [pc, #188]	; (800088c <main+0x14c>)
 80007ce:	4618      	mov	r0, r3
 80007d0:	f002 fa20 	bl	8002c14 <siprintf>
	                HAL_UART_Transmit(&huart2, message, sizeof(message), 100);
 80007d4:	1d39      	adds	r1, r7, #4
 80007d6:	2364      	movs	r3, #100	; 0x64
 80007d8:	2232      	movs	r2, #50	; 0x32
 80007da:	482d      	ldr	r0, [pc, #180]	; (8000890 <main+0x150>)
 80007dc:	f002 f87d 	bl	80028da <HAL_UART_Transmit>
	                //sprintf(message, "Control Ticks = %d\n\r",controlSignal);
	                //HAL_UART_Transmit(&huart2, message, sizeof(message), 100);


	                calculatePID();
 80007e0:	f000 f9ba 	bl	8000b58 <calculatePID>

	            HAL_Delay(8);
 80007e4:	2008      	movs	r0, #8
 80007e6:	f000 fc39 	bl	800105c <HAL_Delay>

	            if(controlSignal>=0)
 80007ea:	4b2a      	ldr	r3, [pc, #168]	; (8000894 <main+0x154>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f04f 0100 	mov.w	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ff6a 	bl	80006cc <__aeabi_fcmpge>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d01d      	beq.n	800083a <main+0xfa>
	            {
	            	if((int)controlSignal>65530)
 80007fe:	4b25      	ldr	r3, [pc, #148]	; (8000894 <main+0x154>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ff76 	bl	80006f4 <__aeabi_f2iz>
 8000808:	4603      	mov	r3, r0
 800080a:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 800080e:	4293      	cmp	r3, r2
 8000810:	dd07      	ble.n	8000822 <main+0xe2>
	            	{
	            		TIM3->CCR2 = 0;
 8000812:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <main+0x140>)
 8000814:	2200      	movs	r2, #0
 8000816:	639a      	str	r2, [r3, #56]	; 0x38
	            		TIM3->CCR1 = 65535;
 8000818:	4b19      	ldr	r3, [pc, #100]	; (8000880 <main+0x140>)
 800081a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800081e:	635a      	str	r2, [r3, #52]	; 0x34
 8000820:	e7bd      	b.n	800079e <main+0x5e>
	            	}
	            	else
	            	{
	            		TIM3->CCR2 = 0;
 8000822:	4b17      	ldr	r3, [pc, #92]	; (8000880 <main+0x140>)
 8000824:	2200      	movs	r2, #0
 8000826:	639a      	str	r2, [r3, #56]	; 0x38
	            		TIM3->CCR1 = (int)controlSignal;
 8000828:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <main+0x154>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ff61 	bl	80006f4 <__aeabi_f2iz>
 8000832:	4602      	mov	r2, r0
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <main+0x140>)
 8000836:	635a      	str	r2, [r3, #52]	; 0x34
 8000838:	e7b1      	b.n	800079e <main+0x5e>


	            }
	            else
	            {
	            	if((int)controlSignal<-65530)
 800083a:	4b16      	ldr	r3, [pc, #88]	; (8000894 <main+0x154>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ff58 	bl	80006f4 <__aeabi_f2iz>
 8000844:	4603      	mov	r3, r0
 8000846:	4a14      	ldr	r2, [pc, #80]	; (8000898 <main+0x158>)
 8000848:	4293      	cmp	r3, r2
 800084a:	da07      	bge.n	800085c <main+0x11c>
	            	{
	            		TIM3->CCR1 = 0;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <main+0x140>)
 800084e:	2200      	movs	r2, #0
 8000850:	635a      	str	r2, [r3, #52]	; 0x34
	            		TIM3->CCR2 = 65535;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <main+0x140>)
 8000854:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000858:	639a      	str	r2, [r3, #56]	; 0x38
 800085a:	e7a0      	b.n	800079e <main+0x5e>
	            	}
	            	else
	            	{
	            		TIM3->CCR1 = 0;
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <main+0x140>)
 800085e:	2200      	movs	r2, #0
 8000860:	635a      	str	r2, [r3, #52]	; 0x34
	            		TIM3->CCR2 = -(int)controlSignal;
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <main+0x154>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff ff44 	bl	80006f4 <__aeabi_f2iz>
 800086c:	4603      	mov	r3, r0
 800086e:	425a      	negs	r2, r3
 8000870:	4b03      	ldr	r3, [pc, #12]	; (8000880 <main+0x140>)
 8000872:	639a      	str	r2, [r3, #56]	; 0x38
  {
 8000874:	e793      	b.n	800079e <main+0x5e>
 8000876:	bf00      	nop
 8000878:	2000009c 	.word	0x2000009c
 800087c:	200000e4 	.word	0x200000e4
 8000880:	40000400 	.word	0x40000400
 8000884:	20000170 	.word	0x20000170
 8000888:	20000174 	.word	0x20000174
 800088c:	08003520 	.word	0x08003520
 8000890:	2000012c 	.word	0x2000012c
 8000894:	20000178 	.word	0x20000178
 8000898:	ffff0006 	.word	0xffff0006

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b090      	sub	sp, #64	; 0x40
 80008a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a2:	f107 0318 	add.w	r3, r7, #24
 80008a6:	2228      	movs	r2, #40	; 0x28
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f002 f9aa 	bl	8002c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008be:	2301      	movs	r3, #1
 80008c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008cc:	2301      	movs	r3, #1
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d0:	2302      	movs	r3, #2
 80008d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008da:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e0:	f107 0318 	add.w	r3, r7, #24
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 fe45 	bl	8001574 <HAL_RCC_OscConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80008f0:	f000 f9ca 	bl	8000c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f4:	230f      	movs	r3, #15
 80008f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f8:	2302      	movs	r3, #2
 80008fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000900:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000904:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2102      	movs	r1, #2
 800090e:	4618      	mov	r0, r3
 8000910:	f001 f8b2 	bl	8001a78 <HAL_RCC_ClockConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800091a:	f000 f9b5 	bl	8000c88 <Error_Handler>
  }
}
 800091e:	bf00      	nop
 8000920:	3740      	adds	r7, #64	; 0x40
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08c      	sub	sp, #48	; 0x30
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	2224      	movs	r2, #36	; 0x24
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f002 f964 	bl	8002c04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000944:	4b21      	ldr	r3, [pc, #132]	; (80009cc <MX_TIM2_Init+0xa4>)
 8000946:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800094a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800094c:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <MX_TIM2_Init+0xa4>)
 800094e:	2200      	movs	r2, #0
 8000950:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000952:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <MX_TIM2_Init+0xa4>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000958:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <MX_TIM2_Init+0xa4>)
 800095a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800095e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000960:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <MX_TIM2_Init+0xa4>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000966:	4b19      	ldr	r3, [pc, #100]	; (80009cc <MX_TIM2_Init+0xa4>)
 8000968:	2280      	movs	r2, #128	; 0x80
 800096a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800096c:	2303      	movs	r3, #3
 800096e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000970:	2300      	movs	r3, #0
 8000972:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000974:	2301      	movs	r3, #1
 8000976:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000984:	2301      	movs	r3, #1
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	4619      	mov	r1, r3
 8000996:	480d      	ldr	r0, [pc, #52]	; (80009cc <MX_TIM2_Init+0xa4>)
 8000998:	f001 faf8 	bl	8001f8c <HAL_TIM_Encoder_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80009a2:	f000 f971 	bl	8000c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	4619      	mov	r1, r3
 80009b2:	4806      	ldr	r0, [pc, #24]	; (80009cc <MX_TIM2_Init+0xa4>)
 80009b4:	f001 fee6 	bl	8002784 <HAL_TIMEx_MasterConfigSynchronization>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80009be:	f000 f963 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	3730      	adds	r7, #48	; 0x30
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	2000009c 	.word	0x2000009c

080009d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d6:	f107 0320 	add.w	r3, r7, #32
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]
 80009ee:	615a      	str	r2, [r3, #20]
 80009f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009f2:	4b27      	ldr	r3, [pc, #156]	; (8000a90 <MX_TIM3_Init+0xc0>)
 80009f4:	4a27      	ldr	r2, [pc, #156]	; (8000a94 <MX_TIM3_Init+0xc4>)
 80009f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80009f8:	4b25      	ldr	r3, [pc, #148]	; (8000a90 <MX_TIM3_Init+0xc0>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fe:	4b24      	ldr	r3, [pc, #144]	; (8000a90 <MX_TIM3_Init+0xc0>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a04:	4b22      	ldr	r3, [pc, #136]	; (8000a90 <MX_TIM3_Init+0xc0>)
 8000a06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0c:	4b20      	ldr	r3, [pc, #128]	; (8000a90 <MX_TIM3_Init+0xc0>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a12:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <MX_TIM3_Init+0xc0>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a18:	481d      	ldr	r0, [pc, #116]	; (8000a90 <MX_TIM3_Init+0xc0>)
 8000a1a:	f001 f9c5 	bl	8001da8 <HAL_TIM_PWM_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000a24:	f000 f930 	bl	8000c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a30:	f107 0320 	add.w	r3, r7, #32
 8000a34:	4619      	mov	r1, r3
 8000a36:	4816      	ldr	r0, [pc, #88]	; (8000a90 <MX_TIM3_Init+0xc0>)
 8000a38:	f001 fea4 	bl	8002784 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000a42:	f000 f921 	bl	8000c88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a46:	2360      	movs	r3, #96	; 0x60
 8000a48:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	2200      	movs	r2, #0
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480c      	ldr	r0, [pc, #48]	; (8000a90 <MX_TIM3_Init+0xc0>)
 8000a5e:	f001 fbc5 	bl	80021ec <HAL_TIM_PWM_ConfigChannel>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000a68:	f000 f90e 	bl	8000c88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2204      	movs	r2, #4
 8000a70:	4619      	mov	r1, r3
 8000a72:	4807      	ldr	r0, [pc, #28]	; (8000a90 <MX_TIM3_Init+0xc0>)
 8000a74:	f001 fbba 	bl	80021ec <HAL_TIM_PWM_ConfigChannel>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000a7e:	f000 f903 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a82:	4803      	ldr	r0, [pc, #12]	; (8000a90 <MX_TIM3_Init+0xc0>)
 8000a84:	f000 f982 	bl	8000d8c <HAL_TIM_MspPostInit>

}
 8000a88:	bf00      	nop
 8000a8a:	3728      	adds	r7, #40	; 0x28
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	200000e4 	.word	0x200000e4
 8000a94:	40000400 	.word	0x40000400

08000a98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000a9e:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <MX_USART2_UART_Init+0x50>)
 8000aa0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000aa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000abe:	220c      	movs	r2, #12
 8000ac0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ad0:	f001 feb6 	bl	8002840 <HAL_UART_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ada:	f000 f8d5 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	2000012c 	.word	0x2000012c
 8000ae8:	40004400 	.word	0x40004400

08000aec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af2:	f107 0308 	add.w	r3, r7, #8
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b00:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <MX_GPIO_Init+0x64>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <MX_GPIO_Init+0x64>)
 8000b06:	f043 0320 	orr.w	r3, r3, #32
 8000b0a:	6193      	str	r3, [r2, #24]
 8000b0c:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <MX_GPIO_Init+0x64>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f003 0320 	and.w	r3, r3, #32
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b18:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <MX_GPIO_Init+0x64>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a0c      	ldr	r2, [pc, #48]	; (8000b50 <MX_GPIO_Init+0x64>)
 8000b1e:	f043 0304 	orr.w	r3, r3, #4
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <MX_GPIO_Init+0x64>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f003 0304 	and.w	r3, r3, #4
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b30:	2310      	movs	r3, #16
 8000b32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	f107 0308 	add.w	r3, r7, #8
 8000b40:	4619      	mov	r1, r3
 8000b42:	4804      	ldr	r0, [pc, #16]	; (8000b54 <MX_GPIO_Init+0x68>)
 8000b44:	f000 fb92 	bl	800126c <HAL_GPIO_Init>

}
 8000b48:	bf00      	nop
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40021000 	.word	0x40021000
 8000b54:	40010800 	.word	0x40010800

08000b58 <calculatePID>:




void calculatePID()
{
 8000b58:	b598      	push	{r3, r4, r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	//int currentTime,deltaTime,previousTime,motorPosition,targetPosition
  //Determining the elapsed time
  currentTime = HAL_GetTick(); //current time
 8000b5c:	f000 fa74 	bl	8001048 <HAL_GetTick>
 8000b60:	4603      	mov	r3, r0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fba8 	bl	80002b8 <__aeabi_ui2f>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	4a3a      	ldr	r2, [pc, #232]	; (8000c54 <calculatePID+0xfc>)
 8000b6c:	6013      	str	r3, [r2, #0]
  deltaTime = (currentTime - previousTime);  //time difference in seconds
 8000b6e:	4b39      	ldr	r3, [pc, #228]	; (8000c54 <calculatePID+0xfc>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a39      	ldr	r2, [pc, #228]	; (8000c58 <calculatePID+0x100>)
 8000b74:	6812      	ldr	r2, [r2, #0]
 8000b76:	4611      	mov	r1, r2
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff faeb 	bl	8000154 <__aeabi_fsub>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b36      	ldr	r3, [pc, #216]	; (8000c5c <calculatePID+0x104>)
 8000b84:	601a      	str	r2, [r3, #0]
  previousTime = currentTime; //save the current time for the next iteration to get the time difference
 8000b86:	4b33      	ldr	r3, [pc, #204]	; (8000c54 <calculatePID+0xfc>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a33      	ldr	r2, [pc, #204]	; (8000c58 <calculatePID+0x100>)
 8000b8c:	6013      	str	r3, [r2, #0]
  //---
  errorValue = motorPosition - targetPosition; //Current position - target position (or setpoint)
 8000b8e:	4b34      	ldr	r3, [pc, #208]	; (8000c60 <calculatePID+0x108>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	4b34      	ldr	r3, [pc, #208]	; (8000c64 <calculatePID+0x10c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	1ad3      	subs	r3, r2, r3
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fb91 	bl	80002c0 <__aeabi_i2f>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	4a31      	ldr	r2, [pc, #196]	; (8000c68 <calculatePID+0x110>)
 8000ba2:	6013      	str	r3, [r2, #0]

  edot = (errorValue - previousError) / deltaTime; //edot = de/dt - derivative term
 8000ba4:	4b30      	ldr	r3, [pc, #192]	; (8000c68 <calculatePID+0x110>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a30      	ldr	r2, [pc, #192]	; (8000c6c <calculatePID+0x114>)
 8000baa:	6812      	ldr	r2, [r2, #0]
 8000bac:	4611      	mov	r1, r2
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fad0 	bl	8000154 <__aeabi_fsub>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <calculatePID+0x104>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4610      	mov	r0, r2
 8000bc0:	f7ff fc86 	bl	80004d0 <__aeabi_fdiv>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	4b29      	ldr	r3, [pc, #164]	; (8000c70 <calculatePID+0x118>)
 8000bca:	601a      	str	r2, [r3, #0]

  errorIntegral = errorIntegral + (errorValue * deltaTime); //integral term - Newton-Leibniz, notice, this is a running sum!
 8000bcc:	4b26      	ldr	r3, [pc, #152]	; (8000c68 <calculatePID+0x110>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a22      	ldr	r2, [pc, #136]	; (8000c5c <calculatePID+0x104>)
 8000bd2:	6812      	ldr	r2, [r2, #0]
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fbc6 	bl	8000368 <__aeabi_fmul>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	461a      	mov	r2, r3
 8000be0:	4b24      	ldr	r3, [pc, #144]	; (8000c74 <calculatePID+0x11c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4619      	mov	r1, r3
 8000be6:	4610      	mov	r0, r2
 8000be8:	f7ff fab6 	bl	8000158 <__addsf3>
 8000bec:	4603      	mov	r3, r0
 8000bee:	461a      	mov	r2, r3
 8000bf0:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <calculatePID+0x11c>)
 8000bf2:	601a      	str	r2, [r3, #0]

  controlSignal = (proportional * errorValue) + (derivative * edot) + (integral * errorIntegral); //final sum, proportional term also calculated here
 8000bf4:	4b20      	ldr	r3, [pc, #128]	; (8000c78 <calculatePID+0x120>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a1b      	ldr	r2, [pc, #108]	; (8000c68 <calculatePID+0x110>)
 8000bfa:	6812      	ldr	r2, [r2, #0]
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fbb2 	bl	8000368 <__aeabi_fmul>
 8000c04:	4603      	mov	r3, r0
 8000c06:	461c      	mov	r4, r3
 8000c08:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <calculatePID+0x124>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a18      	ldr	r2, [pc, #96]	; (8000c70 <calculatePID+0x118>)
 8000c0e:	6812      	ldr	r2, [r2, #0]
 8000c10:	4611      	mov	r1, r2
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fba8 	bl	8000368 <__aeabi_fmul>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	f7ff fa9b 	bl	8000158 <__addsf3>
 8000c22:	4603      	mov	r3, r0
 8000c24:	461c      	mov	r4, r3
 8000c26:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <calculatePID+0x128>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a12      	ldr	r2, [pc, #72]	; (8000c74 <calculatePID+0x11c>)
 8000c2c:	6812      	ldr	r2, [r2, #0]
 8000c2e:	4611      	mov	r1, r2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fb99 	bl	8000368 <__aeabi_fmul>
 8000c36:	4603      	mov	r3, r0
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	f7ff fa8c 	bl	8000158 <__addsf3>
 8000c40:	4603      	mov	r3, r0
 8000c42:	461a      	mov	r2, r3
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <calculatePID+0x12c>)
 8000c46:	601a      	str	r2, [r3, #0]

  previousError = errorValue; //save the error for the next iteration to get the difference (for edot)
 8000c48:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <calculatePID+0x110>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <calculatePID+0x114>)
 8000c4e:	6013      	str	r3, [r2, #0]
}
 8000c50:	bf00      	nop
 8000c52:	bd98      	pop	{r3, r4, r7, pc}
 8000c54:	20000188 	.word	0x20000188
 8000c58:	2000017c 	.word	0x2000017c
 8000c5c:	2000018c 	.word	0x2000018c
 8000c60:	20000174 	.word	0x20000174
 8000c64:	20000000 	.word	0x20000000
 8000c68:	20000190 	.word	0x20000190
 8000c6c:	20000180 	.word	0x20000180
 8000c70:	20000194 	.word	0x20000194
 8000c74:	20000184 	.word	0x20000184
 8000c78:	20000004 	.word	0x20000004
 8000c7c:	2000000c 	.word	0x2000000c
 8000c80:	20000008 	.word	0x20000008
 8000c84:	20000178 	.word	0x20000178

08000c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c8c:	b672      	cpsid	i
}
 8000c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <Error_Handler+0x8>
	...

08000c94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <HAL_MspInit+0x40>)
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	4a0d      	ldr	r2, [pc, #52]	; (8000cd4 <HAL_MspInit+0x40>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6193      	str	r3, [r2, #24]
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <HAL_MspInit+0x40>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb2:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <HAL_MspInit+0x40>)
 8000cb4:	69db      	ldr	r3, [r3, #28]
 8000cb6:	4a07      	ldr	r2, [pc, #28]	; (8000cd4 <HAL_MspInit+0x40>)
 8000cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cbc:	61d3      	str	r3, [r2, #28]
 8000cbe:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <HAL_MspInit+0x40>)
 8000cc0:	69db      	ldr	r3, [r3, #28]
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cf6:	d123      	bne.n	8000d40 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cf8:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <HAL_TIM_Encoder_MspInit+0x70>)
 8000cfa:	69db      	ldr	r3, [r3, #28]
 8000cfc:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <HAL_TIM_Encoder_MspInit+0x70>)
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	61d3      	str	r3, [r2, #28]
 8000d04:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <HAL_TIM_Encoder_MspInit+0x70>)
 8000d06:	69db      	ldr	r3, [r3, #28]
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d10:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <HAL_TIM_Encoder_MspInit+0x70>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	4a0c      	ldr	r2, [pc, #48]	; (8000d48 <HAL_TIM_Encoder_MspInit+0x70>)
 8000d16:	f043 0304 	orr.w	r3, r3, #4
 8000d1a:	6193      	str	r3, [r2, #24]
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <HAL_TIM_Encoder_MspInit+0x70>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f003 0304 	and.w	r3, r3, #4
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d34:	f107 0310 	add.w	r3, r7, #16
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4804      	ldr	r0, [pc, #16]	; (8000d4c <HAL_TIM_Encoder_MspInit+0x74>)
 8000d3c:	f000 fa96 	bl	800126c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d40:	bf00      	nop
 8000d42:	3720      	adds	r7, #32
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40010800 	.word	0x40010800

08000d50 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a09      	ldr	r2, [pc, #36]	; (8000d84 <HAL_TIM_PWM_MspInit+0x34>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d10b      	bne.n	8000d7a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <HAL_TIM_PWM_MspInit+0x38>)
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	4a08      	ldr	r2, [pc, #32]	; (8000d88 <HAL_TIM_PWM_MspInit+0x38>)
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	61d3      	str	r3, [r2, #28]
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_TIM_PWM_MspInit+0x38>)
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d7a:	bf00      	nop
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	40000400 	.word	0x40000400
 8000d88:	40021000 	.word	0x40021000

08000d8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0310 	add.w	r3, r7, #16
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a0f      	ldr	r2, [pc, #60]	; (8000de4 <HAL_TIM_MspPostInit+0x58>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d117      	bne.n	8000ddc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dac:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <HAL_TIM_MspPostInit+0x5c>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	4a0d      	ldr	r2, [pc, #52]	; (8000de8 <HAL_TIM_MspPostInit+0x5c>)
 8000db2:	f043 0304 	orr.w	r3, r3, #4
 8000db6:	6193      	str	r3, [r2, #24]
 8000db8:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <HAL_TIM_MspPostInit+0x5c>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	f003 0304 	and.w	r3, r3, #4
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dc4:	23c0      	movs	r3, #192	; 0xc0
 8000dc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <HAL_TIM_MspPostInit+0x60>)
 8000dd8:	f000 fa48 	bl	800126c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ddc:	bf00      	nop
 8000dde:	3720      	adds	r7, #32
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40000400 	.word	0x40000400
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40010800 	.word	0x40010800

08000df0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 0310 	add.w	r3, r7, #16
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a1b      	ldr	r2, [pc, #108]	; (8000e78 <HAL_UART_MspInit+0x88>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d12f      	bne.n	8000e70 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e10:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <HAL_UART_MspInit+0x8c>)
 8000e12:	69db      	ldr	r3, [r3, #28]
 8000e14:	4a19      	ldr	r2, [pc, #100]	; (8000e7c <HAL_UART_MspInit+0x8c>)
 8000e16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e1a:	61d3      	str	r3, [r2, #28]
 8000e1c:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <HAL_UART_MspInit+0x8c>)
 8000e1e:	69db      	ldr	r3, [r3, #28]
 8000e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <HAL_UART_MspInit+0x8c>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	4a13      	ldr	r2, [pc, #76]	; (8000e7c <HAL_UART_MspInit+0x8c>)
 8000e2e:	f043 0304 	orr.w	r3, r3, #4
 8000e32:	6193      	str	r3, [r2, #24]
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <HAL_UART_MspInit+0x8c>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	f003 0304 	and.w	r3, r3, #4
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e40:	2304      	movs	r3, #4
 8000e42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4c:	f107 0310 	add.w	r3, r7, #16
 8000e50:	4619      	mov	r1, r3
 8000e52:	480b      	ldr	r0, [pc, #44]	; (8000e80 <HAL_UART_MspInit+0x90>)
 8000e54:	f000 fa0a 	bl	800126c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e58:	2308      	movs	r3, #8
 8000e5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	f107 0310 	add.w	r3, r7, #16
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4805      	ldr	r0, [pc, #20]	; (8000e80 <HAL_UART_MspInit+0x90>)
 8000e6c:	f000 f9fe 	bl	800126c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e70:	bf00      	nop
 8000e72:	3720      	adds	r7, #32
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40004400 	.word	0x40004400
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	40010800 	.word	0x40010800

08000e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <NMI_Handler+0x4>

08000e8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <HardFault_Handler+0x4>

08000e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <MemManage_Handler+0x4>

08000e96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <BusFault_Handler+0x4>

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <UsageFault_Handler+0x4>

08000ea2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr

08000eae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr

08000eba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr

08000ec6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eca:	f000 f8ab 	bl	8001024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000edc:	4a14      	ldr	r2, [pc, #80]	; (8000f30 <_sbrk+0x5c>)
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <_sbrk+0x60>)
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <_sbrk+0x64>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d102      	bne.n	8000ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <_sbrk+0x64>)
 8000ef2:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <_sbrk+0x68>)
 8000ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <_sbrk+0x64>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d207      	bcs.n	8000f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f04:	f001 fe54 	bl	8002bb0 <__errno>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	220c      	movs	r2, #12
 8000f0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f12:	e009      	b.n	8000f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <_sbrk+0x64>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f1a:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <_sbrk+0x64>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	4a05      	ldr	r2, [pc, #20]	; (8000f38 <_sbrk+0x64>)
 8000f24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f26:	68fb      	ldr	r3, [r7, #12]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20005000 	.word	0x20005000
 8000f34:	00000400 	.word	0x00000400
 8000f38:	20000198 	.word	0x20000198
 8000f3c:	200001b0 	.word	0x200001b0

08000f40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr

08000f4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f4c:	480c      	ldr	r0, [pc, #48]	; (8000f80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f4e:	490d      	ldr	r1, [pc, #52]	; (8000f84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f50:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f54:	e002      	b.n	8000f5c <LoopCopyDataInit>

08000f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5a:	3304      	adds	r3, #4

08000f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f60:	d3f9      	bcc.n	8000f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f64:	4c0a      	ldr	r4, [pc, #40]	; (8000f90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f68:	e001      	b.n	8000f6e <LoopFillZerobss>

08000f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f6c:	3204      	adds	r2, #4

08000f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f70:	d3fb      	bcc.n	8000f6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f72:	f7ff ffe5 	bl	8000f40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f76:	f001 fe21 	bl	8002bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f7a:	f7ff fbe1 	bl	8000740 <main>
  bx lr
 8000f7e:	4770      	bx	lr
  ldr r0, =_sdata
 8000f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f84:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000f88:	0800359c 	.word	0x0800359c
  ldr r2, =_sbss
 8000f8c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000f90:	200001b0 	.word	0x200001b0

08000f94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f94:	e7fe      	b.n	8000f94 <ADC1_2_IRQHandler>
	...

08000f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <HAL_Init+0x28>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a07      	ldr	r2, [pc, #28]	; (8000fc0 <HAL_Init+0x28>)
 8000fa2:	f043 0310 	orr.w	r3, r3, #16
 8000fa6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa8:	2003      	movs	r0, #3
 8000faa:	f000 f92b 	bl	8001204 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fae:	200f      	movs	r0, #15
 8000fb0:	f000 f808 	bl	8000fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb4:	f7ff fe6e 	bl	8000c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40022000 	.word	0x40022000

08000fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_InitTick+0x54>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_InitTick+0x58>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f935 	bl	8001252 <HAL_SYSTICK_Config>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00e      	b.n	8001010 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b0f      	cmp	r3, #15
 8000ff6:	d80a      	bhi.n	800100e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8001000:	f000 f90b 	bl	800121a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001004:	4a06      	ldr	r2, [pc, #24]	; (8001020 <HAL_InitTick+0x5c>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	e000      	b.n	8001010 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000010 	.word	0x20000010
 800101c:	20000018 	.word	0x20000018
 8001020:	20000014 	.word	0x20000014

08001024 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <HAL_IncTick+0x1c>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	4b05      	ldr	r3, [pc, #20]	; (8001044 <HAL_IncTick+0x20>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4413      	add	r3, r2
 8001034:	4a03      	ldr	r2, [pc, #12]	; (8001044 <HAL_IncTick+0x20>)
 8001036:	6013      	str	r3, [r2, #0]
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr
 8001040:	20000018 	.word	0x20000018
 8001044:	2000019c 	.word	0x2000019c

08001048 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return uwTick;
 800104c:	4b02      	ldr	r3, [pc, #8]	; (8001058 <HAL_GetTick+0x10>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr
 8001058:	2000019c 	.word	0x2000019c

0800105c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001064:	f7ff fff0 	bl	8001048 <HAL_GetTick>
 8001068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001074:	d005      	beq.n	8001082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <HAL_Delay+0x44>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001082:	bf00      	nop
 8001084:	f7ff ffe0 	bl	8001048 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	429a      	cmp	r2, r3
 8001092:	d8f7      	bhi.n	8001084 <HAL_Delay+0x28>
  {
  }
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000018 	.word	0x20000018

080010a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c0:	4013      	ands	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d6:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	60d3      	str	r3, [r2, #12]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <__NVIC_GetPriorityGrouping+0x18>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	f003 0307 	and.w	r3, r3, #7
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	db0a      	blt.n	8001132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	490c      	ldr	r1, [pc, #48]	; (8001154 <__NVIC_SetPriority+0x4c>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	440b      	add	r3, r1
 800112c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001130:	e00a      	b.n	8001148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4908      	ldr	r1, [pc, #32]	; (8001158 <__NVIC_SetPriority+0x50>)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	3b04      	subs	r3, #4
 8001140:	0112      	lsls	r2, r2, #4
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	440b      	add	r3, r1
 8001146:	761a      	strb	r2, [r3, #24]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f1c3 0307 	rsb	r3, r3, #7
 8001176:	2b04      	cmp	r3, #4
 8001178:	bf28      	it	cs
 800117a:	2304      	movcs	r3, #4
 800117c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3304      	adds	r3, #4
 8001182:	2b06      	cmp	r3, #6
 8001184:	d902      	bls.n	800118c <NVIC_EncodePriority+0x30>
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3b03      	subs	r3, #3
 800118a:	e000      	b.n	800118e <NVIC_EncodePriority+0x32>
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	f04f 32ff 	mov.w	r2, #4294967295
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43da      	mvns	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	401a      	ands	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	43d9      	mvns	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	4313      	orrs	r3, r2
         );
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3724      	adds	r7, #36	; 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr

080011c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d0:	d301      	bcc.n	80011d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d2:	2301      	movs	r3, #1
 80011d4:	e00f      	b.n	80011f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011d6:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <SysTick_Config+0x40>)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011de:	210f      	movs	r1, #15
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295
 80011e4:	f7ff ff90 	bl	8001108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <SysTick_Config+0x40>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ee:	4b04      	ldr	r3, [pc, #16]	; (8001200 <SysTick_Config+0x40>)
 80011f0:	2207      	movs	r2, #7
 80011f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	e000e010 	.word	0xe000e010

08001204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ff49 	bl	80010a4 <__NVIC_SetPriorityGrouping>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800121a:	b580      	push	{r7, lr}
 800121c:	b086      	sub	sp, #24
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
 8001226:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800122c:	f7ff ff5e 	bl	80010ec <__NVIC_GetPriorityGrouping>
 8001230:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	68b9      	ldr	r1, [r7, #8]
 8001236:	6978      	ldr	r0, [r7, #20]
 8001238:	f7ff ff90 	bl	800115c <NVIC_EncodePriority>
 800123c:	4602      	mov	r2, r0
 800123e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff5f 	bl	8001108 <__NVIC_SetPriority>
}
 800124a:	bf00      	nop
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff ffb0 	bl	80011c0 <SysTick_Config>
 8001260:	4603      	mov	r3, r0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800126c:	b480      	push	{r7}
 800126e:	b08b      	sub	sp, #44	; 0x2c
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001276:	2300      	movs	r3, #0
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800127a:	2300      	movs	r3, #0
 800127c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800127e:	e169      	b.n	8001554 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001280:	2201      	movs	r2, #1
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	69fa      	ldr	r2, [r7, #28]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	429a      	cmp	r2, r3
 800129a:	f040 8158 	bne.w	800154e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	4a9a      	ldr	r2, [pc, #616]	; (800150c <HAL_GPIO_Init+0x2a0>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d05e      	beq.n	8001366 <HAL_GPIO_Init+0xfa>
 80012a8:	4a98      	ldr	r2, [pc, #608]	; (800150c <HAL_GPIO_Init+0x2a0>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d875      	bhi.n	800139a <HAL_GPIO_Init+0x12e>
 80012ae:	4a98      	ldr	r2, [pc, #608]	; (8001510 <HAL_GPIO_Init+0x2a4>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d058      	beq.n	8001366 <HAL_GPIO_Init+0xfa>
 80012b4:	4a96      	ldr	r2, [pc, #600]	; (8001510 <HAL_GPIO_Init+0x2a4>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d86f      	bhi.n	800139a <HAL_GPIO_Init+0x12e>
 80012ba:	4a96      	ldr	r2, [pc, #600]	; (8001514 <HAL_GPIO_Init+0x2a8>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d052      	beq.n	8001366 <HAL_GPIO_Init+0xfa>
 80012c0:	4a94      	ldr	r2, [pc, #592]	; (8001514 <HAL_GPIO_Init+0x2a8>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d869      	bhi.n	800139a <HAL_GPIO_Init+0x12e>
 80012c6:	4a94      	ldr	r2, [pc, #592]	; (8001518 <HAL_GPIO_Init+0x2ac>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d04c      	beq.n	8001366 <HAL_GPIO_Init+0xfa>
 80012cc:	4a92      	ldr	r2, [pc, #584]	; (8001518 <HAL_GPIO_Init+0x2ac>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d863      	bhi.n	800139a <HAL_GPIO_Init+0x12e>
 80012d2:	4a92      	ldr	r2, [pc, #584]	; (800151c <HAL_GPIO_Init+0x2b0>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d046      	beq.n	8001366 <HAL_GPIO_Init+0xfa>
 80012d8:	4a90      	ldr	r2, [pc, #576]	; (800151c <HAL_GPIO_Init+0x2b0>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d85d      	bhi.n	800139a <HAL_GPIO_Init+0x12e>
 80012de:	2b12      	cmp	r3, #18
 80012e0:	d82a      	bhi.n	8001338 <HAL_GPIO_Init+0xcc>
 80012e2:	2b12      	cmp	r3, #18
 80012e4:	d859      	bhi.n	800139a <HAL_GPIO_Init+0x12e>
 80012e6:	a201      	add	r2, pc, #4	; (adr r2, 80012ec <HAL_GPIO_Init+0x80>)
 80012e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ec:	08001367 	.word	0x08001367
 80012f0:	08001341 	.word	0x08001341
 80012f4:	08001353 	.word	0x08001353
 80012f8:	08001395 	.word	0x08001395
 80012fc:	0800139b 	.word	0x0800139b
 8001300:	0800139b 	.word	0x0800139b
 8001304:	0800139b 	.word	0x0800139b
 8001308:	0800139b 	.word	0x0800139b
 800130c:	0800139b 	.word	0x0800139b
 8001310:	0800139b 	.word	0x0800139b
 8001314:	0800139b 	.word	0x0800139b
 8001318:	0800139b 	.word	0x0800139b
 800131c:	0800139b 	.word	0x0800139b
 8001320:	0800139b 	.word	0x0800139b
 8001324:	0800139b 	.word	0x0800139b
 8001328:	0800139b 	.word	0x0800139b
 800132c:	0800139b 	.word	0x0800139b
 8001330:	08001349 	.word	0x08001349
 8001334:	0800135d 	.word	0x0800135d
 8001338:	4a79      	ldr	r2, [pc, #484]	; (8001520 <HAL_GPIO_Init+0x2b4>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d013      	beq.n	8001366 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800133e:	e02c      	b.n	800139a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	623b      	str	r3, [r7, #32]
          break;
 8001346:	e029      	b.n	800139c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	3304      	adds	r3, #4
 800134e:	623b      	str	r3, [r7, #32]
          break;
 8001350:	e024      	b.n	800139c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	3308      	adds	r3, #8
 8001358:	623b      	str	r3, [r7, #32]
          break;
 800135a:	e01f      	b.n	800139c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	330c      	adds	r3, #12
 8001362:	623b      	str	r3, [r7, #32]
          break;
 8001364:	e01a      	b.n	800139c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d102      	bne.n	8001374 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800136e:	2304      	movs	r3, #4
 8001370:	623b      	str	r3, [r7, #32]
          break;
 8001372:	e013      	b.n	800139c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d105      	bne.n	8001388 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800137c:	2308      	movs	r3, #8
 800137e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69fa      	ldr	r2, [r7, #28]
 8001384:	611a      	str	r2, [r3, #16]
          break;
 8001386:	e009      	b.n	800139c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001388:	2308      	movs	r3, #8
 800138a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69fa      	ldr	r2, [r7, #28]
 8001390:	615a      	str	r2, [r3, #20]
          break;
 8001392:	e003      	b.n	800139c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
          break;
 8001398:	e000      	b.n	800139c <HAL_GPIO_Init+0x130>
          break;
 800139a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	2bff      	cmp	r3, #255	; 0xff
 80013a0:	d801      	bhi.n	80013a6 <HAL_GPIO_Init+0x13a>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	e001      	b.n	80013aa <HAL_GPIO_Init+0x13e>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	3304      	adds	r3, #4
 80013aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	2bff      	cmp	r3, #255	; 0xff
 80013b0:	d802      	bhi.n	80013b8 <HAL_GPIO_Init+0x14c>
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	e002      	b.n	80013be <HAL_GPIO_Init+0x152>
 80013b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ba:	3b08      	subs	r3, #8
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	210f      	movs	r1, #15
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	fa01 f303 	lsl.w	r3, r1, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	401a      	ands	r2, r3
 80013d0:	6a39      	ldr	r1, [r7, #32]
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	fa01 f303 	lsl.w	r3, r1, r3
 80013d8:	431a      	orrs	r2, r3
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 80b1 	beq.w	800154e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013ec:	4b4d      	ldr	r3, [pc, #308]	; (8001524 <HAL_GPIO_Init+0x2b8>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	4a4c      	ldr	r2, [pc, #304]	; (8001524 <HAL_GPIO_Init+0x2b8>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	6193      	str	r3, [r2, #24]
 80013f8:	4b4a      	ldr	r3, [pc, #296]	; (8001524 <HAL_GPIO_Init+0x2b8>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001404:	4a48      	ldr	r2, [pc, #288]	; (8001528 <HAL_GPIO_Init+0x2bc>)
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	089b      	lsrs	r3, r3, #2
 800140a:	3302      	adds	r3, #2
 800140c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001410:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	220f      	movs	r2, #15
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	4013      	ands	r3, r2
 8001426:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a40      	ldr	r2, [pc, #256]	; (800152c <HAL_GPIO_Init+0x2c0>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d013      	beq.n	8001458 <HAL_GPIO_Init+0x1ec>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a3f      	ldr	r2, [pc, #252]	; (8001530 <HAL_GPIO_Init+0x2c4>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d00d      	beq.n	8001454 <HAL_GPIO_Init+0x1e8>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a3e      	ldr	r2, [pc, #248]	; (8001534 <HAL_GPIO_Init+0x2c8>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d007      	beq.n	8001450 <HAL_GPIO_Init+0x1e4>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a3d      	ldr	r2, [pc, #244]	; (8001538 <HAL_GPIO_Init+0x2cc>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d101      	bne.n	800144c <HAL_GPIO_Init+0x1e0>
 8001448:	2303      	movs	r3, #3
 800144a:	e006      	b.n	800145a <HAL_GPIO_Init+0x1ee>
 800144c:	2304      	movs	r3, #4
 800144e:	e004      	b.n	800145a <HAL_GPIO_Init+0x1ee>
 8001450:	2302      	movs	r3, #2
 8001452:	e002      	b.n	800145a <HAL_GPIO_Init+0x1ee>
 8001454:	2301      	movs	r3, #1
 8001456:	e000      	b.n	800145a <HAL_GPIO_Init+0x1ee>
 8001458:	2300      	movs	r3, #0
 800145a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800145c:	f002 0203 	and.w	r2, r2, #3
 8001460:	0092      	lsls	r2, r2, #2
 8001462:	4093      	lsls	r3, r2
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	4313      	orrs	r3, r2
 8001468:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800146a:	492f      	ldr	r1, [pc, #188]	; (8001528 <HAL_GPIO_Init+0x2bc>)
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	089b      	lsrs	r3, r3, #2
 8001470:	3302      	adds	r3, #2
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d006      	beq.n	8001492 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001484:	4b2d      	ldr	r3, [pc, #180]	; (800153c <HAL_GPIO_Init+0x2d0>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	492c      	ldr	r1, [pc, #176]	; (800153c <HAL_GPIO_Init+0x2d0>)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	4313      	orrs	r3, r2
 800148e:	600b      	str	r3, [r1, #0]
 8001490:	e006      	b.n	80014a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001492:	4b2a      	ldr	r3, [pc, #168]	; (800153c <HAL_GPIO_Init+0x2d0>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	43db      	mvns	r3, r3
 800149a:	4928      	ldr	r1, [pc, #160]	; (800153c <HAL_GPIO_Init+0x2d0>)
 800149c:	4013      	ands	r3, r2
 800149e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d006      	beq.n	80014ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014ac:	4b23      	ldr	r3, [pc, #140]	; (800153c <HAL_GPIO_Init+0x2d0>)
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	4922      	ldr	r1, [pc, #136]	; (800153c <HAL_GPIO_Init+0x2d0>)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	604b      	str	r3, [r1, #4]
 80014b8:	e006      	b.n	80014c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014ba:	4b20      	ldr	r3, [pc, #128]	; (800153c <HAL_GPIO_Init+0x2d0>)
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	491e      	ldr	r1, [pc, #120]	; (800153c <HAL_GPIO_Init+0x2d0>)
 80014c4:	4013      	ands	r3, r2
 80014c6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d006      	beq.n	80014e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <HAL_GPIO_Init+0x2d0>)
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	4918      	ldr	r1, [pc, #96]	; (800153c <HAL_GPIO_Init+0x2d0>)
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	4313      	orrs	r3, r2
 80014de:	608b      	str	r3, [r1, #8]
 80014e0:	e006      	b.n	80014f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014e2:	4b16      	ldr	r3, [pc, #88]	; (800153c <HAL_GPIO_Init+0x2d0>)
 80014e4:	689a      	ldr	r2, [r3, #8]
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	4914      	ldr	r1, [pc, #80]	; (800153c <HAL_GPIO_Init+0x2d0>)
 80014ec:	4013      	ands	r3, r2
 80014ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d021      	beq.n	8001540 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014fc:	4b0f      	ldr	r3, [pc, #60]	; (800153c <HAL_GPIO_Init+0x2d0>)
 80014fe:	68da      	ldr	r2, [r3, #12]
 8001500:	490e      	ldr	r1, [pc, #56]	; (800153c <HAL_GPIO_Init+0x2d0>)
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	4313      	orrs	r3, r2
 8001506:	60cb      	str	r3, [r1, #12]
 8001508:	e021      	b.n	800154e <HAL_GPIO_Init+0x2e2>
 800150a:	bf00      	nop
 800150c:	10320000 	.word	0x10320000
 8001510:	10310000 	.word	0x10310000
 8001514:	10220000 	.word	0x10220000
 8001518:	10210000 	.word	0x10210000
 800151c:	10120000 	.word	0x10120000
 8001520:	10110000 	.word	0x10110000
 8001524:	40021000 	.word	0x40021000
 8001528:	40010000 	.word	0x40010000
 800152c:	40010800 	.word	0x40010800
 8001530:	40010c00 	.word	0x40010c00
 8001534:	40011000 	.word	0x40011000
 8001538:	40011400 	.word	0x40011400
 800153c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <HAL_GPIO_Init+0x304>)
 8001542:	68da      	ldr	r2, [r3, #12]
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	43db      	mvns	r3, r3
 8001548:	4909      	ldr	r1, [pc, #36]	; (8001570 <HAL_GPIO_Init+0x304>)
 800154a:	4013      	ands	r3, r2
 800154c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	3301      	adds	r3, #1
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	fa22 f303 	lsr.w	r3, r2, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	f47f ae8e 	bne.w	8001280 <HAL_GPIO_Init+0x14>
  }
}
 8001564:	bf00      	nop
 8001566:	bf00      	nop
 8001568:	372c      	adds	r7, #44	; 0x2c
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	40010400 	.word	0x40010400

08001574 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e272      	b.n	8001a6c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b00      	cmp	r3, #0
 8001590:	f000 8087 	beq.w	80016a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001594:	4b92      	ldr	r3, [pc, #584]	; (80017e0 <HAL_RCC_OscConfig+0x26c>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 030c 	and.w	r3, r3, #12
 800159c:	2b04      	cmp	r3, #4
 800159e:	d00c      	beq.n	80015ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015a0:	4b8f      	ldr	r3, [pc, #572]	; (80017e0 <HAL_RCC_OscConfig+0x26c>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 030c 	and.w	r3, r3, #12
 80015a8:	2b08      	cmp	r3, #8
 80015aa:	d112      	bne.n	80015d2 <HAL_RCC_OscConfig+0x5e>
 80015ac:	4b8c      	ldr	r3, [pc, #560]	; (80017e0 <HAL_RCC_OscConfig+0x26c>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b8:	d10b      	bne.n	80015d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ba:	4b89      	ldr	r3, [pc, #548]	; (80017e0 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d06c      	beq.n	80016a0 <HAL_RCC_OscConfig+0x12c>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d168      	bne.n	80016a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e24c      	b.n	8001a6c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015da:	d106      	bne.n	80015ea <HAL_RCC_OscConfig+0x76>
 80015dc:	4b80      	ldr	r3, [pc, #512]	; (80017e0 <HAL_RCC_OscConfig+0x26c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a7f      	ldr	r2, [pc, #508]	; (80017e0 <HAL_RCC_OscConfig+0x26c>)
 80015e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	e02e      	b.n	8001648 <HAL_RCC_OscConfig+0xd4>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10c      	bne.n	800160c <HAL_RCC_OscConfig+0x98>
 80015f2:	4b7b      	ldr	r3, [pc, #492]	; (80017e0 <HAL_RCC_OscConfig+0x26c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a7a      	ldr	r2, [pc, #488]	; (80017e0 <HAL_RCC_OscConfig+0x26c>)
 80015f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	4b78      	ldr	r3, [pc, #480]	; (80017e0 <HAL_RCC_OscConfig+0x26c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a77      	ldr	r2, [pc, #476]	; (80017e0 <HAL_RCC_OscConfig+0x26c>)
 8001604:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001608:	6013      	str	r3, [r2, #0]
 800160a:	e01d      	b.n	8001648 <HAL_RCC_OscConfig+0xd4>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001614:	d10c      	bne.n	8001630 <HAL_RCC_OscConfig+0xbc>
 8001616:	4b72      	ldr	r3, [pc, #456]	; (80017e0 <HAL_RCC_OscConfig+0x26c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a71      	ldr	r2, [pc, #452]	; (80017e0 <HAL_RCC_OscConfig+0x26c>)
 800161c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	4b6f      	ldr	r3, [pc, #444]	; (80017e0 <HAL_RCC_OscConfig+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a6e      	ldr	r2, [pc, #440]	; (80017e0 <HAL_RCC_OscConfig+0x26c>)
 8001628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	e00b      	b.n	8001648 <HAL_RCC_OscConfig+0xd4>
 8001630:	4b6b      	ldr	r3, [pc, #428]	; (80017e0 <HAL_RCC_OscConfig+0x26c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a6a      	ldr	r2, [pc, #424]	; (80017e0 <HAL_RCC_OscConfig+0x26c>)
 8001636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	4b68      	ldr	r3, [pc, #416]	; (80017e0 <HAL_RCC_OscConfig+0x26c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a67      	ldr	r2, [pc, #412]	; (80017e0 <HAL_RCC_OscConfig+0x26c>)
 8001642:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001646:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d013      	beq.n	8001678 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001650:	f7ff fcfa 	bl	8001048 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001658:	f7ff fcf6 	bl	8001048 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b64      	cmp	r3, #100	; 0x64
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e200      	b.n	8001a6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166a:	4b5d      	ldr	r3, [pc, #372]	; (80017e0 <HAL_RCC_OscConfig+0x26c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0f0      	beq.n	8001658 <HAL_RCC_OscConfig+0xe4>
 8001676:	e014      	b.n	80016a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001678:	f7ff fce6 	bl	8001048 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001680:	f7ff fce2 	bl	8001048 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b64      	cmp	r3, #100	; 0x64
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e1ec      	b.n	8001a6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001692:	4b53      	ldr	r3, [pc, #332]	; (80017e0 <HAL_RCC_OscConfig+0x26c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x10c>
 800169e:	e000      	b.n	80016a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d063      	beq.n	8001776 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016ae:	4b4c      	ldr	r3, [pc, #304]	; (80017e0 <HAL_RCC_OscConfig+0x26c>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 030c 	and.w	r3, r3, #12
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00b      	beq.n	80016d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016ba:	4b49      	ldr	r3, [pc, #292]	; (80017e0 <HAL_RCC_OscConfig+0x26c>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 030c 	and.w	r3, r3, #12
 80016c2:	2b08      	cmp	r3, #8
 80016c4:	d11c      	bne.n	8001700 <HAL_RCC_OscConfig+0x18c>
 80016c6:	4b46      	ldr	r3, [pc, #280]	; (80017e0 <HAL_RCC_OscConfig+0x26c>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d116      	bne.n	8001700 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016d2:	4b43      	ldr	r3, [pc, #268]	; (80017e0 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d005      	beq.n	80016ea <HAL_RCC_OscConfig+0x176>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d001      	beq.n	80016ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e1c0      	b.n	8001a6c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ea:	4b3d      	ldr	r3, [pc, #244]	; (80017e0 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	4939      	ldr	r1, [pc, #228]	; (80017e0 <HAL_RCC_OscConfig+0x26c>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016fe:	e03a      	b.n	8001776 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d020      	beq.n	800174a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001708:	4b36      	ldr	r3, [pc, #216]	; (80017e4 <HAL_RCC_OscConfig+0x270>)
 800170a:	2201      	movs	r2, #1
 800170c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170e:	f7ff fc9b 	bl	8001048 <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001716:	f7ff fc97 	bl	8001048 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e1a1      	b.n	8001a6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001728:	4b2d      	ldr	r3, [pc, #180]	; (80017e0 <HAL_RCC_OscConfig+0x26c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0f0      	beq.n	8001716 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001734:	4b2a      	ldr	r3, [pc, #168]	; (80017e0 <HAL_RCC_OscConfig+0x26c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	695b      	ldr	r3, [r3, #20]
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	4927      	ldr	r1, [pc, #156]	; (80017e0 <HAL_RCC_OscConfig+0x26c>)
 8001744:	4313      	orrs	r3, r2
 8001746:	600b      	str	r3, [r1, #0]
 8001748:	e015      	b.n	8001776 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800174a:	4b26      	ldr	r3, [pc, #152]	; (80017e4 <HAL_RCC_OscConfig+0x270>)
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001750:	f7ff fc7a 	bl	8001048 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001758:	f7ff fc76 	bl	8001048 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e180      	b.n	8001a6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800176a:	4b1d      	ldr	r3, [pc, #116]	; (80017e0 <HAL_RCC_OscConfig+0x26c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1f0      	bne.n	8001758 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0308 	and.w	r3, r3, #8
 800177e:	2b00      	cmp	r3, #0
 8001780:	d03a      	beq.n	80017f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d019      	beq.n	80017be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800178a:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <HAL_RCC_OscConfig+0x274>)
 800178c:	2201      	movs	r2, #1
 800178e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001790:	f7ff fc5a 	bl	8001048 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001798:	f7ff fc56 	bl	8001048 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e160      	b.n	8001a6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017aa:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0f0      	beq.n	8001798 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017b6:	2001      	movs	r0, #1
 80017b8:	f000 fad8 	bl	8001d6c <RCC_Delay>
 80017bc:	e01c      	b.n	80017f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017be:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <HAL_RCC_OscConfig+0x274>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c4:	f7ff fc40 	bl	8001048 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ca:	e00f      	b.n	80017ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017cc:	f7ff fc3c 	bl	8001048 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d908      	bls.n	80017ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e146      	b.n	8001a6c <HAL_RCC_OscConfig+0x4f8>
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000
 80017e4:	42420000 	.word	0x42420000
 80017e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ec:	4b92      	ldr	r3, [pc, #584]	; (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 80017ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1e9      	bne.n	80017cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 80a6 	beq.w	8001952 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001806:	2300      	movs	r3, #0
 8001808:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800180a:	4b8b      	ldr	r3, [pc, #556]	; (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10d      	bne.n	8001832 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001816:	4b88      	ldr	r3, [pc, #544]	; (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	4a87      	ldr	r2, [pc, #540]	; (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 800181c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001820:	61d3      	str	r3, [r2, #28]
 8001822:	4b85      	ldr	r3, [pc, #532]	; (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800182e:	2301      	movs	r3, #1
 8001830:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001832:	4b82      	ldr	r3, [pc, #520]	; (8001a3c <HAL_RCC_OscConfig+0x4c8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183a:	2b00      	cmp	r3, #0
 800183c:	d118      	bne.n	8001870 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800183e:	4b7f      	ldr	r3, [pc, #508]	; (8001a3c <HAL_RCC_OscConfig+0x4c8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a7e      	ldr	r2, [pc, #504]	; (8001a3c <HAL_RCC_OscConfig+0x4c8>)
 8001844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800184a:	f7ff fbfd 	bl	8001048 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001852:	f7ff fbf9 	bl	8001048 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b64      	cmp	r3, #100	; 0x64
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e103      	b.n	8001a6c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001864:	4b75      	ldr	r3, [pc, #468]	; (8001a3c <HAL_RCC_OscConfig+0x4c8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0f0      	beq.n	8001852 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d106      	bne.n	8001886 <HAL_RCC_OscConfig+0x312>
 8001878:	4b6f      	ldr	r3, [pc, #444]	; (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	4a6e      	ldr	r2, [pc, #440]	; (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	6213      	str	r3, [r2, #32]
 8001884:	e02d      	b.n	80018e2 <HAL_RCC_OscConfig+0x36e>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d10c      	bne.n	80018a8 <HAL_RCC_OscConfig+0x334>
 800188e:	4b6a      	ldr	r3, [pc, #424]	; (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	4a69      	ldr	r2, [pc, #420]	; (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 8001894:	f023 0301 	bic.w	r3, r3, #1
 8001898:	6213      	str	r3, [r2, #32]
 800189a:	4b67      	ldr	r3, [pc, #412]	; (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	4a66      	ldr	r2, [pc, #408]	; (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 80018a0:	f023 0304 	bic.w	r3, r3, #4
 80018a4:	6213      	str	r3, [r2, #32]
 80018a6:	e01c      	b.n	80018e2 <HAL_RCC_OscConfig+0x36e>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	2b05      	cmp	r3, #5
 80018ae:	d10c      	bne.n	80018ca <HAL_RCC_OscConfig+0x356>
 80018b0:	4b61      	ldr	r3, [pc, #388]	; (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	4a60      	ldr	r2, [pc, #384]	; (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 80018b6:	f043 0304 	orr.w	r3, r3, #4
 80018ba:	6213      	str	r3, [r2, #32]
 80018bc:	4b5e      	ldr	r3, [pc, #376]	; (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	4a5d      	ldr	r2, [pc, #372]	; (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	6213      	str	r3, [r2, #32]
 80018c8:	e00b      	b.n	80018e2 <HAL_RCC_OscConfig+0x36e>
 80018ca:	4b5b      	ldr	r3, [pc, #364]	; (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 80018cc:	6a1b      	ldr	r3, [r3, #32]
 80018ce:	4a5a      	ldr	r2, [pc, #360]	; (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 80018d0:	f023 0301 	bic.w	r3, r3, #1
 80018d4:	6213      	str	r3, [r2, #32]
 80018d6:	4b58      	ldr	r3, [pc, #352]	; (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	4a57      	ldr	r2, [pc, #348]	; (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 80018dc:	f023 0304 	bic.w	r3, r3, #4
 80018e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d015      	beq.n	8001916 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ea:	f7ff fbad 	bl	8001048 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f0:	e00a      	b.n	8001908 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f2:	f7ff fba9 	bl	8001048 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001900:	4293      	cmp	r3, r2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e0b1      	b.n	8001a6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001908:	4b4b      	ldr	r3, [pc, #300]	; (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0ee      	beq.n	80018f2 <HAL_RCC_OscConfig+0x37e>
 8001914:	e014      	b.n	8001940 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001916:	f7ff fb97 	bl	8001048 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800191c:	e00a      	b.n	8001934 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800191e:	f7ff fb93 	bl	8001048 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	f241 3288 	movw	r2, #5000	; 0x1388
 800192c:	4293      	cmp	r3, r2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e09b      	b.n	8001a6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001934:	4b40      	ldr	r3, [pc, #256]	; (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1ee      	bne.n	800191e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001940:	7dfb      	ldrb	r3, [r7, #23]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d105      	bne.n	8001952 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001946:	4b3c      	ldr	r3, [pc, #240]	; (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	4a3b      	ldr	r2, [pc, #236]	; (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 800194c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001950:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 8087 	beq.w	8001a6a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800195c:	4b36      	ldr	r3, [pc, #216]	; (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 030c 	and.w	r3, r3, #12
 8001964:	2b08      	cmp	r3, #8
 8001966:	d061      	beq.n	8001a2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	2b02      	cmp	r3, #2
 800196e:	d146      	bne.n	80019fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001970:	4b33      	ldr	r3, [pc, #204]	; (8001a40 <HAL_RCC_OscConfig+0x4cc>)
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001976:	f7ff fb67 	bl	8001048 <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197e:	f7ff fb63 	bl	8001048 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e06d      	b.n	8001a6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001990:	4b29      	ldr	r3, [pc, #164]	; (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1f0      	bne.n	800197e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a4:	d108      	bne.n	80019b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019a6:	4b24      	ldr	r3, [pc, #144]	; (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	4921      	ldr	r1, [pc, #132]	; (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019b8:	4b1f      	ldr	r3, [pc, #124]	; (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a19      	ldr	r1, [r3, #32]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c8:	430b      	orrs	r3, r1
 80019ca:	491b      	ldr	r1, [pc, #108]	; (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019d0:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <HAL_RCC_OscConfig+0x4cc>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d6:	f7ff fb37 	bl	8001048 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019de:	f7ff fb33 	bl	8001048 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e03d      	b.n	8001a6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019f0:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0f0      	beq.n	80019de <HAL_RCC_OscConfig+0x46a>
 80019fc:	e035      	b.n	8001a6a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019fe:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <HAL_RCC_OscConfig+0x4cc>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a04:	f7ff fb20 	bl	8001048 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a0c:	f7ff fb1c 	bl	8001048 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e026      	b.n	8001a6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_RCC_OscConfig+0x4c4>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x498>
 8001a2a:	e01e      	b.n	8001a6a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d107      	bne.n	8001a44 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e019      	b.n	8001a6c <HAL_RCC_OscConfig+0x4f8>
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40007000 	.word	0x40007000
 8001a40:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <HAL_RCC_OscConfig+0x500>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d106      	bne.n	8001a66 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d001      	beq.n	8001a6a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e000      	b.n	8001a6c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40021000 	.word	0x40021000

08001a78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e0d0      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a8c:	4b6a      	ldr	r3, [pc, #424]	; (8001c38 <HAL_RCC_ClockConfig+0x1c0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d910      	bls.n	8001abc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9a:	4b67      	ldr	r3, [pc, #412]	; (8001c38 <HAL_RCC_ClockConfig+0x1c0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f023 0207 	bic.w	r2, r3, #7
 8001aa2:	4965      	ldr	r1, [pc, #404]	; (8001c38 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aaa:	4b63      	ldr	r3, [pc, #396]	; (8001c38 <HAL_RCC_ClockConfig+0x1c0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d001      	beq.n	8001abc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0b8      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d020      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ad4:	4b59      	ldr	r3, [pc, #356]	; (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	4a58      	ldr	r2, [pc, #352]	; (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001ada:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ade:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d005      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aec:	4b53      	ldr	r3, [pc, #332]	; (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	4a52      	ldr	r2, [pc, #328]	; (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001af2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001af6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af8:	4b50      	ldr	r3, [pc, #320]	; (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	494d      	ldr	r1, [pc, #308]	; (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d040      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d107      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1e:	4b47      	ldr	r3, [pc, #284]	; (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d115      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e07f      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d107      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b36:	4b41      	ldr	r3, [pc, #260]	; (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d109      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e073      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b46:	4b3d      	ldr	r3, [pc, #244]	; (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e06b      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b56:	4b39      	ldr	r3, [pc, #228]	; (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f023 0203 	bic.w	r2, r3, #3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	4936      	ldr	r1, [pc, #216]	; (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b68:	f7ff fa6e 	bl	8001048 <HAL_GetTick>
 8001b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6e:	e00a      	b.n	8001b86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b70:	f7ff fa6a 	bl	8001048 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e053      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b86:	4b2d      	ldr	r3, [pc, #180]	; (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 020c 	and.w	r2, r3, #12
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d1eb      	bne.n	8001b70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b98:	4b27      	ldr	r3, [pc, #156]	; (8001c38 <HAL_RCC_ClockConfig+0x1c0>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d210      	bcs.n	8001bc8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba6:	4b24      	ldr	r3, [pc, #144]	; (8001c38 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f023 0207 	bic.w	r2, r3, #7
 8001bae:	4922      	ldr	r1, [pc, #136]	; (8001c38 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb6:	4b20      	ldr	r3, [pc, #128]	; (8001c38 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d001      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e032      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d008      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd4:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	4916      	ldr	r1, [pc, #88]	; (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d009      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bf2:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	490e      	ldr	r1, [pc, #56]	; (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c06:	f000 f821 	bl	8001c4c <HAL_RCC_GetSysClockFreq>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	091b      	lsrs	r3, r3, #4
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	490a      	ldr	r1, [pc, #40]	; (8001c40 <HAL_RCC_ClockConfig+0x1c8>)
 8001c18:	5ccb      	ldrb	r3, [r1, r3]
 8001c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1e:	4a09      	ldr	r2, [pc, #36]	; (8001c44 <HAL_RCC_ClockConfig+0x1cc>)
 8001c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_RCC_ClockConfig+0x1d0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff f9cc 	bl	8000fc4 <HAL_InitTick>

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40022000 	.word	0x40022000
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	08003548 	.word	0x08003548
 8001c44:	20000010 	.word	0x20000010
 8001c48:	20000014 	.word	0x20000014

08001c4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c4c:	b490      	push	{r4, r7}
 8001c4e:	b08a      	sub	sp, #40	; 0x28
 8001c50:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c52:	4b29      	ldr	r3, [pc, #164]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001c54:	1d3c      	adds	r4, r7, #4
 8001c56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c5c:	f240 2301 	movw	r3, #513	; 0x201
 8001c60:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c76:	4b21      	ldr	r3, [pc, #132]	; (8001cfc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	d002      	beq.n	8001c8c <HAL_RCC_GetSysClockFreq+0x40>
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d003      	beq.n	8001c92 <HAL_RCC_GetSysClockFreq+0x46>
 8001c8a:	e02b      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c8c:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c8e:	623b      	str	r3, [r7, #32]
      break;
 8001c90:	e02b      	b.n	8001cea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	0c9b      	lsrs	r3, r3, #18
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	3328      	adds	r3, #40	; 0x28
 8001c9c:	443b      	add	r3, r7
 8001c9e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ca2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d012      	beq.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cae:	4b13      	ldr	r3, [pc, #76]	; (8001cfc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	0c5b      	lsrs	r3, r3, #17
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	3328      	adds	r3, #40	; 0x28
 8001cba:	443b      	add	r3, r7
 8001cbc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001cc0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	4a0e      	ldr	r2, [pc, #56]	; (8001d00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cc6:	fb03 f202 	mul.w	r2, r3, r2
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd2:	e004      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	4a0b      	ldr	r2, [pc, #44]	; (8001d04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cd8:	fb02 f303 	mul.w	r3, r2, r3
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	623b      	str	r3, [r7, #32]
      break;
 8001ce2:	e002      	b.n	8001cea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ce4:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ce6:	623b      	str	r3, [r7, #32]
      break;
 8001ce8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cea:	6a3b      	ldr	r3, [r7, #32]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3728      	adds	r7, #40	; 0x28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc90      	pop	{r4, r7}
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	08003538 	.word	0x08003538
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	007a1200 	.word	0x007a1200
 8001d04:	003d0900 	.word	0x003d0900

08001d08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d0c:	4b02      	ldr	r3, [pc, #8]	; (8001d18 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr
 8001d18:	20000010 	.word	0x20000010

08001d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d20:	f7ff fff2 	bl	8001d08 <HAL_RCC_GetHCLKFreq>
 8001d24:	4602      	mov	r2, r0
 8001d26:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	0a1b      	lsrs	r3, r3, #8
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	4903      	ldr	r1, [pc, #12]	; (8001d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d32:	5ccb      	ldrb	r3, [r1, r3]
 8001d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	08003558 	.word	0x08003558

08001d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d48:	f7ff ffde 	bl	8001d08 <HAL_RCC_GetHCLKFreq>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	0adb      	lsrs	r3, r3, #11
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	4903      	ldr	r1, [pc, #12]	; (8001d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d5a:	5ccb      	ldrb	r3, [r1, r3]
 8001d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40021000 	.word	0x40021000
 8001d68:	08003558 	.word	0x08003558

08001d6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d74:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <RCC_Delay+0x34>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <RCC_Delay+0x38>)
 8001d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7e:	0a5b      	lsrs	r3, r3, #9
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	fb02 f303 	mul.w	r3, r2, r3
 8001d86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d88:	bf00      	nop
  }
  while (Delay --);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	1e5a      	subs	r2, r3, #1
 8001d8e:	60fa      	str	r2, [r7, #12]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1f9      	bne.n	8001d88 <RCC_Delay+0x1c>
}
 8001d94:	bf00      	nop
 8001d96:	bf00      	nop
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr
 8001da0:	20000010 	.word	0x20000010
 8001da4:	10624dd3 	.word	0x10624dd3

08001da8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e041      	b.n	8001e3e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d106      	bne.n	8001dd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7fe ffbe 	bl	8000d50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3304      	adds	r3, #4
 8001de4:	4619      	mov	r1, r3
 8001de6:	4610      	mov	r0, r2
 8001de8:	f000 fabe 	bl	8002368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
	...

08001e48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d109      	bne.n	8001e6c <HAL_TIM_PWM_Start+0x24>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	bf14      	ite	ne
 8001e64:	2301      	movne	r3, #1
 8001e66:	2300      	moveq	r3, #0
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	e022      	b.n	8001eb2 <HAL_TIM_PWM_Start+0x6a>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	d109      	bne.n	8001e86 <HAL_TIM_PWM_Start+0x3e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	bf14      	ite	ne
 8001e7e:	2301      	movne	r3, #1
 8001e80:	2300      	moveq	r3, #0
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	e015      	b.n	8001eb2 <HAL_TIM_PWM_Start+0x6a>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d109      	bne.n	8001ea0 <HAL_TIM_PWM_Start+0x58>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	bf14      	ite	ne
 8001e98:	2301      	movne	r3, #1
 8001e9a:	2300      	moveq	r3, #0
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	e008      	b.n	8001eb2 <HAL_TIM_PWM_Start+0x6a>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	bf14      	ite	ne
 8001eac:	2301      	movne	r3, #1
 8001eae:	2300      	moveq	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e05e      	b.n	8001f78 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d104      	bne.n	8001eca <HAL_TIM_PWM_Start+0x82>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ec8:	e013      	b.n	8001ef2 <HAL_TIM_PWM_Start+0xaa>
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d104      	bne.n	8001eda <HAL_TIM_PWM_Start+0x92>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ed8:	e00b      	b.n	8001ef2 <HAL_TIM_PWM_Start+0xaa>
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d104      	bne.n	8001eea <HAL_TIM_PWM_Start+0xa2>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ee8:	e003      	b.n	8001ef2 <HAL_TIM_PWM_Start+0xaa>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2202      	movs	r2, #2
 8001eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	6839      	ldr	r1, [r7, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 fc1e 	bl	800273c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a1e      	ldr	r2, [pc, #120]	; (8001f80 <HAL_TIM_PWM_Start+0x138>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d107      	bne.n	8001f1a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a18      	ldr	r2, [pc, #96]	; (8001f80 <HAL_TIM_PWM_Start+0x138>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d00e      	beq.n	8001f42 <HAL_TIM_PWM_Start+0xfa>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f2c:	d009      	beq.n	8001f42 <HAL_TIM_PWM_Start+0xfa>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a14      	ldr	r2, [pc, #80]	; (8001f84 <HAL_TIM_PWM_Start+0x13c>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d004      	beq.n	8001f42 <HAL_TIM_PWM_Start+0xfa>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a12      	ldr	r2, [pc, #72]	; (8001f88 <HAL_TIM_PWM_Start+0x140>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d111      	bne.n	8001f66 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2b06      	cmp	r3, #6
 8001f52:	d010      	beq.n	8001f76 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 0201 	orr.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f64:	e007      	b.n	8001f76 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f042 0201 	orr.w	r2, r2, #1
 8001f74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40012c00 	.word	0x40012c00
 8001f84:	40000400 	.word	0x40000400
 8001f88:	40000800 	.word	0x40000800

08001f8c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e093      	b.n	80020c8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d106      	bne.n	8001fba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7fe fe8f 	bl	8000cd8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fd0:	f023 0307 	bic.w	r3, r3, #7
 8001fd4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	f000 f9c1 	bl	8002368 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	4313      	orrs	r3, r2
 8002006:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800200e:	f023 0303 	bic.w	r3, r3, #3
 8002012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	021b      	lsls	r3, r3, #8
 800201e:	4313      	orrs	r3, r2
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4313      	orrs	r3, r2
 8002024:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800202c:	f023 030c 	bic.w	r3, r3, #12
 8002030:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002038:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800203c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	021b      	lsls	r3, r3, #8
 8002048:	4313      	orrs	r3, r2
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4313      	orrs	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	011a      	lsls	r2, r3, #4
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	031b      	lsls	r3, r3, #12
 800205c:	4313      	orrs	r3, r2
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4313      	orrs	r3, r2
 8002062:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800206a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	011b      	lsls	r3, r3, #4
 8002076:	4313      	orrs	r3, r2
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4313      	orrs	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80020e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80020f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80020f8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d110      	bne.n	8002122 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d102      	bne.n	800210c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002106:	7b7b      	ldrb	r3, [r7, #13]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d001      	beq.n	8002110 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e069      	b.n	80021e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2202      	movs	r2, #2
 8002114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2202      	movs	r2, #2
 800211c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002120:	e031      	b.n	8002186 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	2b04      	cmp	r3, #4
 8002126:	d110      	bne.n	800214a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002128:	7bbb      	ldrb	r3, [r7, #14]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d102      	bne.n	8002134 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800212e:	7b3b      	ldrb	r3, [r7, #12]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d001      	beq.n	8002138 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e055      	b.n	80021e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2202      	movs	r2, #2
 800213c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2202      	movs	r2, #2
 8002144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002148:	e01d      	b.n	8002186 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d108      	bne.n	8002162 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002150:	7bbb      	ldrb	r3, [r7, #14]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d105      	bne.n	8002162 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002156:	7b7b      	ldrb	r3, [r7, #13]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d102      	bne.n	8002162 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800215c:	7b3b      	ldrb	r3, [r7, #12]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d001      	beq.n	8002166 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e03e      	b.n	80021e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2202      	movs	r2, #2
 800216a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2202      	movs	r2, #2
 8002172:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2202      	movs	r2, #2
 800217a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2202      	movs	r2, #2
 8002182:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <HAL_TIM_Encoder_Start+0xc4>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	2b04      	cmp	r3, #4
 8002190:	d008      	beq.n	80021a4 <HAL_TIM_Encoder_Start+0xd4>
 8002192:	e00f      	b.n	80021b4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2201      	movs	r2, #1
 800219a:	2100      	movs	r1, #0
 800219c:	4618      	mov	r0, r3
 800219e:	f000 facd 	bl	800273c <TIM_CCxChannelCmd>
      break;
 80021a2:	e016      	b.n	80021d2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2201      	movs	r2, #1
 80021aa:	2104      	movs	r1, #4
 80021ac:	4618      	mov	r0, r3
 80021ae:	f000 fac5 	bl	800273c <TIM_CCxChannelCmd>
      break;
 80021b2:	e00e      	b.n	80021d2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2201      	movs	r2, #1
 80021ba:	2100      	movs	r1, #0
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 fabd 	bl	800273c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2201      	movs	r2, #1
 80021c8:	2104      	movs	r1, #4
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 fab6 	bl	800273c <TIM_CCxChannelCmd>
      break;
 80021d0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f042 0201 	orr.w	r2, r2, #1
 80021e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d101      	bne.n	8002206 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002202:	2302      	movs	r3, #2
 8002204:	e0ac      	b.n	8002360 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b0c      	cmp	r3, #12
 8002212:	f200 809f 	bhi.w	8002354 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002216:	a201      	add	r2, pc, #4	; (adr r2, 800221c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800221c:	08002251 	.word	0x08002251
 8002220:	08002355 	.word	0x08002355
 8002224:	08002355 	.word	0x08002355
 8002228:	08002355 	.word	0x08002355
 800222c:	08002291 	.word	0x08002291
 8002230:	08002355 	.word	0x08002355
 8002234:	08002355 	.word	0x08002355
 8002238:	08002355 	.word	0x08002355
 800223c:	080022d3 	.word	0x080022d3
 8002240:	08002355 	.word	0x08002355
 8002244:	08002355 	.word	0x08002355
 8002248:	08002355 	.word	0x08002355
 800224c:	08002313 	.word	0x08002313
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68b9      	ldr	r1, [r7, #8]
 8002256:	4618      	mov	r0, r3
 8002258:	f000 f8e8 	bl	800242c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	699a      	ldr	r2, [r3, #24]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0208 	orr.w	r2, r2, #8
 800226a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	699a      	ldr	r2, [r3, #24]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f022 0204 	bic.w	r2, r2, #4
 800227a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6999      	ldr	r1, [r3, #24]
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	691a      	ldr	r2, [r3, #16]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	619a      	str	r2, [r3, #24]
      break;
 800228e:	e062      	b.n	8002356 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68b9      	ldr	r1, [r7, #8]
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f92e 	bl	80024f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	699a      	ldr	r2, [r3, #24]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	699a      	ldr	r2, [r3, #24]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6999      	ldr	r1, [r3, #24]
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	021a      	lsls	r2, r3, #8
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	619a      	str	r2, [r3, #24]
      break;
 80022d0:	e041      	b.n	8002356 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68b9      	ldr	r1, [r7, #8]
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 f977 	bl	80025cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	69da      	ldr	r2, [r3, #28]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f042 0208 	orr.w	r2, r2, #8
 80022ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	69da      	ldr	r2, [r3, #28]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 0204 	bic.w	r2, r2, #4
 80022fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	69d9      	ldr	r1, [r3, #28]
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	61da      	str	r2, [r3, #28]
      break;
 8002310:	e021      	b.n	8002356 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68b9      	ldr	r1, [r7, #8]
 8002318:	4618      	mov	r0, r3
 800231a:	f000 f9c1 	bl	80026a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	69da      	ldr	r2, [r3, #28]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800232c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	69da      	ldr	r2, [r3, #28]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800233c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	69d9      	ldr	r1, [r3, #28]
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	021a      	lsls	r2, r3, #8
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	61da      	str	r2, [r3, #28]
      break;
 8002352:	e000      	b.n	8002356 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002354:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a29      	ldr	r2, [pc, #164]	; (8002420 <TIM_Base_SetConfig+0xb8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d00b      	beq.n	8002398 <TIM_Base_SetConfig+0x30>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002386:	d007      	beq.n	8002398 <TIM_Base_SetConfig+0x30>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a26      	ldr	r2, [pc, #152]	; (8002424 <TIM_Base_SetConfig+0xbc>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d003      	beq.n	8002398 <TIM_Base_SetConfig+0x30>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a25      	ldr	r2, [pc, #148]	; (8002428 <TIM_Base_SetConfig+0xc0>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d108      	bne.n	80023aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800239e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a1c      	ldr	r2, [pc, #112]	; (8002420 <TIM_Base_SetConfig+0xb8>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d00b      	beq.n	80023ca <TIM_Base_SetConfig+0x62>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023b8:	d007      	beq.n	80023ca <TIM_Base_SetConfig+0x62>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a19      	ldr	r2, [pc, #100]	; (8002424 <TIM_Base_SetConfig+0xbc>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d003      	beq.n	80023ca <TIM_Base_SetConfig+0x62>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a18      	ldr	r2, [pc, #96]	; (8002428 <TIM_Base_SetConfig+0xc0>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d108      	bne.n	80023dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	4313      	orrs	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a07      	ldr	r2, [pc, #28]	; (8002420 <TIM_Base_SetConfig+0xb8>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d103      	bne.n	8002410 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	691a      	ldr	r2, [r3, #16]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	615a      	str	r2, [r3, #20]
}
 8002416:	bf00      	nop
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr
 8002420:	40012c00 	.word	0x40012c00
 8002424:	40000400 	.word	0x40000400
 8002428:	40000800 	.word	0x40000800

0800242c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800242c:	b480      	push	{r7}
 800242e:	b087      	sub	sp, #28
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	f023 0201 	bic.w	r2, r3, #1
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800245a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f023 0303 	bic.w	r3, r3, #3
 8002462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	4313      	orrs	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	f023 0302 	bic.w	r3, r3, #2
 8002474:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	4313      	orrs	r3, r2
 800247e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a1c      	ldr	r2, [pc, #112]	; (80024f4 <TIM_OC1_SetConfig+0xc8>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d10c      	bne.n	80024a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f023 0308 	bic.w	r3, r3, #8
 800248e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	4313      	orrs	r3, r2
 8002498:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f023 0304 	bic.w	r3, r3, #4
 80024a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a13      	ldr	r2, [pc, #76]	; (80024f4 <TIM_OC1_SetConfig+0xc8>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d111      	bne.n	80024ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	621a      	str	r2, [r3, #32]
}
 80024e8:	bf00      	nop
 80024ea:	371c      	adds	r7, #28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40012c00 	.word	0x40012c00

080024f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b087      	sub	sp, #28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	f023 0210 	bic.w	r2, r3, #16
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800252e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	021b      	lsls	r3, r3, #8
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4313      	orrs	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f023 0320 	bic.w	r3, r3, #32
 8002542:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	011b      	lsls	r3, r3, #4
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	4313      	orrs	r3, r2
 800254e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a1d      	ldr	r2, [pc, #116]	; (80025c8 <TIM_OC2_SetConfig+0xd0>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d10d      	bne.n	8002574 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800255e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	4313      	orrs	r3, r2
 800256a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002572:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a14      	ldr	r2, [pc, #80]	; (80025c8 <TIM_OC2_SetConfig+0xd0>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d113      	bne.n	80025a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002582:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800258a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	4313      	orrs	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	621a      	str	r2, [r3, #32]
}
 80025be:	bf00      	nop
 80025c0:	371c      	adds	r7, #28
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	40012c00 	.word	0x40012c00

080025cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f023 0303 	bic.w	r3, r3, #3
 8002602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	4313      	orrs	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002614:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	021b      	lsls	r3, r3, #8
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	4313      	orrs	r3, r2
 8002620:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a1d      	ldr	r2, [pc, #116]	; (800269c <TIM_OC3_SetConfig+0xd0>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d10d      	bne.n	8002646 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002630:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	021b      	lsls	r3, r3, #8
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	4313      	orrs	r3, r2
 800263c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002644:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a14      	ldr	r2, [pc, #80]	; (800269c <TIM_OC3_SetConfig+0xd0>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d113      	bne.n	8002676 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800265c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	4313      	orrs	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	011b      	lsls	r3, r3, #4
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4313      	orrs	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	621a      	str	r2, [r3, #32]
}
 8002690:	bf00      	nop
 8002692:	371c      	adds	r7, #28
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40012c00 	.word	0x40012c00

080026a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b087      	sub	sp, #28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	021b      	lsls	r3, r3, #8
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	031b      	lsls	r3, r3, #12
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a0f      	ldr	r2, [pc, #60]	; (8002738 <TIM_OC4_SetConfig+0x98>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d109      	bne.n	8002714 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002706:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	019b      	lsls	r3, r3, #6
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4313      	orrs	r3, r2
 8002712:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	621a      	str	r2, [r3, #32]
}
 800272e:	bf00      	nop
 8002730:	371c      	adds	r7, #28
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr
 8002738:	40012c00 	.word	0x40012c00

0800273c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800273c:	b480      	push	{r7}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	f003 031f 	and.w	r3, r3, #31
 800274e:	2201      	movs	r2, #1
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6a1a      	ldr	r2, [r3, #32]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	43db      	mvns	r3, r3
 800275e:	401a      	ands	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a1a      	ldr	r2, [r3, #32]
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	f003 031f 	and.w	r3, r3, #31
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	fa01 f303 	lsl.w	r3, r1, r3
 8002774:	431a      	orrs	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	621a      	str	r2, [r3, #32]
}
 800277a:	bf00      	nop
 800277c:	371c      	adds	r7, #28
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr

08002784 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002798:	2302      	movs	r3, #2
 800279a:	e046      	b.n	800282a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2202      	movs	r2, #2
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a16      	ldr	r2, [pc, #88]	; (8002834 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d00e      	beq.n	80027fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027e8:	d009      	beq.n	80027fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a12      	ldr	r2, [pc, #72]	; (8002838 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d004      	beq.n	80027fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a10      	ldr	r2, [pc, #64]	; (800283c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d10c      	bne.n	8002818 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002804:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	4313      	orrs	r3, r2
 800280e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68ba      	ldr	r2, [r7, #8]
 8002816:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr
 8002834:	40012c00 	.word	0x40012c00
 8002838:	40000400 	.word	0x40000400
 800283c:	40000800 	.word	0x40000800

08002840 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e03f      	b.n	80028d2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d106      	bne.n	800286c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7fe fac2 	bl	8000df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2224      	movs	r2, #36	; 0x24
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002882:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f905 	bl	8002a94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	691a      	ldr	r2, [r3, #16]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002898:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695a      	ldr	r2, [r3, #20]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68da      	ldr	r2, [r3, #12]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2220      	movs	r2, #32
 80028cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b08a      	sub	sp, #40	; 0x28
 80028de:	af02      	add	r7, sp, #8
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	603b      	str	r3, [r7, #0]
 80028e6:	4613      	mov	r3, r2
 80028e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b20      	cmp	r3, #32
 80028f8:	d17c      	bne.n	80029f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d002      	beq.n	8002906 <HAL_UART_Transmit+0x2c>
 8002900:	88fb      	ldrh	r3, [r7, #6]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e075      	b.n	80029f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <HAL_UART_Transmit+0x3e>
 8002914:	2302      	movs	r3, #2
 8002916:	e06e      	b.n	80029f6 <HAL_UART_Transmit+0x11c>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2221      	movs	r2, #33	; 0x21
 800292a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800292e:	f7fe fb8b 	bl	8001048 <HAL_GetTick>
 8002932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	88fa      	ldrh	r2, [r7, #6]
 8002938:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	88fa      	ldrh	r2, [r7, #6]
 800293e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002948:	d108      	bne.n	800295c <HAL_UART_Transmit+0x82>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d104      	bne.n	800295c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002952:	2300      	movs	r3, #0
 8002954:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	61bb      	str	r3, [r7, #24]
 800295a:	e003      	b.n	8002964 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002960:	2300      	movs	r3, #0
 8002962:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800296c:	e02a      	b.n	80029c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2200      	movs	r2, #0
 8002976:	2180      	movs	r1, #128	; 0x80
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 f840 	bl	80029fe <UART_WaitOnFlagUntilTimeout>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e036      	b.n	80029f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10b      	bne.n	80029a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	461a      	mov	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800299c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	3302      	adds	r3, #2
 80029a2:	61bb      	str	r3, [r7, #24]
 80029a4:	e007      	b.n	80029b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	781a      	ldrb	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	3301      	adds	r3, #1
 80029b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	3b01      	subs	r3, #1
 80029be:	b29a      	uxth	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1cf      	bne.n	800296e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2200      	movs	r2, #0
 80029d6:	2140      	movs	r1, #64	; 0x40
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 f810 	bl	80029fe <UART_WaitOnFlagUntilTimeout>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e006      	b.n	80029f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	e000      	b.n	80029f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80029f4:	2302      	movs	r3, #2
  }
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3720      	adds	r7, #32
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b084      	sub	sp, #16
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	603b      	str	r3, [r7, #0]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a0e:	e02c      	b.n	8002a6a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a16:	d028      	beq.n	8002a6a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d007      	beq.n	8002a2e <UART_WaitOnFlagUntilTimeout+0x30>
 8002a1e:	f7fe fb13 	bl	8001048 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d21d      	bcs.n	8002a6a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68da      	ldr	r2, [r3, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a3c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695a      	ldr	r2, [r3, #20]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0201 	bic.w	r2, r2, #1
 8002a4c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2220      	movs	r2, #32
 8002a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e00f      	b.n	8002a8a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	4013      	ands	r3, r2
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	bf0c      	ite	eq
 8002a7a:	2301      	moveq	r3, #1
 8002a7c:	2300      	movne	r3, #0
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	461a      	mov	r2, r3
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d0c3      	beq.n	8002a10 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689a      	ldr	r2, [r3, #8]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002ace:	f023 030c 	bic.w	r3, r3, #12
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6812      	ldr	r2, [r2, #0]
 8002ad6:	68b9      	ldr	r1, [r7, #8]
 8002ad8:	430b      	orrs	r3, r1
 8002ada:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699a      	ldr	r2, [r3, #24]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a2c      	ldr	r2, [pc, #176]	; (8002ba8 <UART_SetConfig+0x114>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d103      	bne.n	8002b04 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002afc:	f7ff f922 	bl	8001d44 <HAL_RCC_GetPCLK2Freq>
 8002b00:	60f8      	str	r0, [r7, #12]
 8002b02:	e002      	b.n	8002b0a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b04:	f7ff f90a 	bl	8001d1c <HAL_RCC_GetPCLK1Freq>
 8002b08:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	009a      	lsls	r2, r3, #2
 8002b14:	441a      	add	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b20:	4a22      	ldr	r2, [pc, #136]	; (8002bac <UART_SetConfig+0x118>)
 8002b22:	fba2 2303 	umull	r2, r3, r2, r3
 8002b26:	095b      	lsrs	r3, r3, #5
 8002b28:	0119      	lsls	r1, r3, #4
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	009a      	lsls	r2, r3, #2
 8002b34:	441a      	add	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b40:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <UART_SetConfig+0x118>)
 8002b42:	fba3 0302 	umull	r0, r3, r3, r2
 8002b46:	095b      	lsrs	r3, r3, #5
 8002b48:	2064      	movs	r0, #100	; 0x64
 8002b4a:	fb00 f303 	mul.w	r3, r0, r3
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	3332      	adds	r3, #50	; 0x32
 8002b54:	4a15      	ldr	r2, [pc, #84]	; (8002bac <UART_SetConfig+0x118>)
 8002b56:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5a:	095b      	lsrs	r3, r3, #5
 8002b5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b60:	4419      	add	r1, r3
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	4613      	mov	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	009a      	lsls	r2, r3, #2
 8002b6c:	441a      	add	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b78:	4b0c      	ldr	r3, [pc, #48]	; (8002bac <UART_SetConfig+0x118>)
 8002b7a:	fba3 0302 	umull	r0, r3, r3, r2
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	2064      	movs	r0, #100	; 0x64
 8002b82:	fb00 f303 	mul.w	r3, r0, r3
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	3332      	adds	r3, #50	; 0x32
 8002b8c:	4a07      	ldr	r2, [pc, #28]	; (8002bac <UART_SetConfig+0x118>)
 8002b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b92:	095b      	lsrs	r3, r3, #5
 8002b94:	f003 020f 	and.w	r2, r3, #15
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	440a      	add	r2, r1
 8002b9e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ba0:	bf00      	nop
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40013800 	.word	0x40013800
 8002bac:	51eb851f 	.word	0x51eb851f

08002bb0 <__errno>:
 8002bb0:	4b01      	ldr	r3, [pc, #4]	; (8002bb8 <__errno+0x8>)
 8002bb2:	6818      	ldr	r0, [r3, #0]
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	2000001c 	.word	0x2000001c

08002bbc <__libc_init_array>:
 8002bbc:	b570      	push	{r4, r5, r6, lr}
 8002bbe:	2600      	movs	r6, #0
 8002bc0:	4d0c      	ldr	r5, [pc, #48]	; (8002bf4 <__libc_init_array+0x38>)
 8002bc2:	4c0d      	ldr	r4, [pc, #52]	; (8002bf8 <__libc_init_array+0x3c>)
 8002bc4:	1b64      	subs	r4, r4, r5
 8002bc6:	10a4      	asrs	r4, r4, #2
 8002bc8:	42a6      	cmp	r6, r4
 8002bca:	d109      	bne.n	8002be0 <__libc_init_array+0x24>
 8002bcc:	f000 fc9c 	bl	8003508 <_init>
 8002bd0:	2600      	movs	r6, #0
 8002bd2:	4d0a      	ldr	r5, [pc, #40]	; (8002bfc <__libc_init_array+0x40>)
 8002bd4:	4c0a      	ldr	r4, [pc, #40]	; (8002c00 <__libc_init_array+0x44>)
 8002bd6:	1b64      	subs	r4, r4, r5
 8002bd8:	10a4      	asrs	r4, r4, #2
 8002bda:	42a6      	cmp	r6, r4
 8002bdc:	d105      	bne.n	8002bea <__libc_init_array+0x2e>
 8002bde:	bd70      	pop	{r4, r5, r6, pc}
 8002be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002be4:	4798      	blx	r3
 8002be6:	3601      	adds	r6, #1
 8002be8:	e7ee      	b.n	8002bc8 <__libc_init_array+0xc>
 8002bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bee:	4798      	blx	r3
 8002bf0:	3601      	adds	r6, #1
 8002bf2:	e7f2      	b.n	8002bda <__libc_init_array+0x1e>
 8002bf4:	08003594 	.word	0x08003594
 8002bf8:	08003594 	.word	0x08003594
 8002bfc:	08003594 	.word	0x08003594
 8002c00:	08003598 	.word	0x08003598

08002c04 <memset>:
 8002c04:	4603      	mov	r3, r0
 8002c06:	4402      	add	r2, r0
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d100      	bne.n	8002c0e <memset+0xa>
 8002c0c:	4770      	bx	lr
 8002c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c12:	e7f9      	b.n	8002c08 <memset+0x4>

08002c14 <siprintf>:
 8002c14:	b40e      	push	{r1, r2, r3}
 8002c16:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002c1a:	b500      	push	{lr}
 8002c1c:	b09c      	sub	sp, #112	; 0x70
 8002c1e:	ab1d      	add	r3, sp, #116	; 0x74
 8002c20:	9002      	str	r0, [sp, #8]
 8002c22:	9006      	str	r0, [sp, #24]
 8002c24:	9107      	str	r1, [sp, #28]
 8002c26:	9104      	str	r1, [sp, #16]
 8002c28:	4808      	ldr	r0, [pc, #32]	; (8002c4c <siprintf+0x38>)
 8002c2a:	4909      	ldr	r1, [pc, #36]	; (8002c50 <siprintf+0x3c>)
 8002c2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c30:	9105      	str	r1, [sp, #20]
 8002c32:	6800      	ldr	r0, [r0, #0]
 8002c34:	a902      	add	r1, sp, #8
 8002c36:	9301      	str	r3, [sp, #4]
 8002c38:	f000 f868 	bl	8002d0c <_svfiprintf_r>
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	9b02      	ldr	r3, [sp, #8]
 8002c40:	701a      	strb	r2, [r3, #0]
 8002c42:	b01c      	add	sp, #112	; 0x70
 8002c44:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c48:	b003      	add	sp, #12
 8002c4a:	4770      	bx	lr
 8002c4c:	2000001c 	.word	0x2000001c
 8002c50:	ffff0208 	.word	0xffff0208

08002c54 <__ssputs_r>:
 8002c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c58:	688e      	ldr	r6, [r1, #8]
 8002c5a:	4682      	mov	sl, r0
 8002c5c:	429e      	cmp	r6, r3
 8002c5e:	460c      	mov	r4, r1
 8002c60:	4690      	mov	r8, r2
 8002c62:	461f      	mov	r7, r3
 8002c64:	d838      	bhi.n	8002cd8 <__ssputs_r+0x84>
 8002c66:	898a      	ldrh	r2, [r1, #12]
 8002c68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002c6c:	d032      	beq.n	8002cd4 <__ssputs_r+0x80>
 8002c6e:	6825      	ldr	r5, [r4, #0]
 8002c70:	6909      	ldr	r1, [r1, #16]
 8002c72:	3301      	adds	r3, #1
 8002c74:	eba5 0901 	sub.w	r9, r5, r1
 8002c78:	6965      	ldr	r5, [r4, #20]
 8002c7a:	444b      	add	r3, r9
 8002c7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002c84:	106d      	asrs	r5, r5, #1
 8002c86:	429d      	cmp	r5, r3
 8002c88:	bf38      	it	cc
 8002c8a:	461d      	movcc	r5, r3
 8002c8c:	0553      	lsls	r3, r2, #21
 8002c8e:	d531      	bpl.n	8002cf4 <__ssputs_r+0xa0>
 8002c90:	4629      	mov	r1, r5
 8002c92:	f000 fb6f 	bl	8003374 <_malloc_r>
 8002c96:	4606      	mov	r6, r0
 8002c98:	b950      	cbnz	r0, 8002cb0 <__ssputs_r+0x5c>
 8002c9a:	230c      	movs	r3, #12
 8002c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca0:	f8ca 3000 	str.w	r3, [sl]
 8002ca4:	89a3      	ldrh	r3, [r4, #12]
 8002ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002caa:	81a3      	strh	r3, [r4, #12]
 8002cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cb0:	464a      	mov	r2, r9
 8002cb2:	6921      	ldr	r1, [r4, #16]
 8002cb4:	f000 face 	bl	8003254 <memcpy>
 8002cb8:	89a3      	ldrh	r3, [r4, #12]
 8002cba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cc2:	81a3      	strh	r3, [r4, #12]
 8002cc4:	6126      	str	r6, [r4, #16]
 8002cc6:	444e      	add	r6, r9
 8002cc8:	6026      	str	r6, [r4, #0]
 8002cca:	463e      	mov	r6, r7
 8002ccc:	6165      	str	r5, [r4, #20]
 8002cce:	eba5 0509 	sub.w	r5, r5, r9
 8002cd2:	60a5      	str	r5, [r4, #8]
 8002cd4:	42be      	cmp	r6, r7
 8002cd6:	d900      	bls.n	8002cda <__ssputs_r+0x86>
 8002cd8:	463e      	mov	r6, r7
 8002cda:	4632      	mov	r2, r6
 8002cdc:	4641      	mov	r1, r8
 8002cde:	6820      	ldr	r0, [r4, #0]
 8002ce0:	f000 fac6 	bl	8003270 <memmove>
 8002ce4:	68a3      	ldr	r3, [r4, #8]
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	1b9b      	subs	r3, r3, r6
 8002cea:	60a3      	str	r3, [r4, #8]
 8002cec:	6823      	ldr	r3, [r4, #0]
 8002cee:	4433      	add	r3, r6
 8002cf0:	6023      	str	r3, [r4, #0]
 8002cf2:	e7db      	b.n	8002cac <__ssputs_r+0x58>
 8002cf4:	462a      	mov	r2, r5
 8002cf6:	f000 fbb1 	bl	800345c <_realloc_r>
 8002cfa:	4606      	mov	r6, r0
 8002cfc:	2800      	cmp	r0, #0
 8002cfe:	d1e1      	bne.n	8002cc4 <__ssputs_r+0x70>
 8002d00:	4650      	mov	r0, sl
 8002d02:	6921      	ldr	r1, [r4, #16]
 8002d04:	f000 face 	bl	80032a4 <_free_r>
 8002d08:	e7c7      	b.n	8002c9a <__ssputs_r+0x46>
	...

08002d0c <_svfiprintf_r>:
 8002d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d10:	4698      	mov	r8, r3
 8002d12:	898b      	ldrh	r3, [r1, #12]
 8002d14:	4607      	mov	r7, r0
 8002d16:	061b      	lsls	r3, r3, #24
 8002d18:	460d      	mov	r5, r1
 8002d1a:	4614      	mov	r4, r2
 8002d1c:	b09d      	sub	sp, #116	; 0x74
 8002d1e:	d50e      	bpl.n	8002d3e <_svfiprintf_r+0x32>
 8002d20:	690b      	ldr	r3, [r1, #16]
 8002d22:	b963      	cbnz	r3, 8002d3e <_svfiprintf_r+0x32>
 8002d24:	2140      	movs	r1, #64	; 0x40
 8002d26:	f000 fb25 	bl	8003374 <_malloc_r>
 8002d2a:	6028      	str	r0, [r5, #0]
 8002d2c:	6128      	str	r0, [r5, #16]
 8002d2e:	b920      	cbnz	r0, 8002d3a <_svfiprintf_r+0x2e>
 8002d30:	230c      	movs	r3, #12
 8002d32:	603b      	str	r3, [r7, #0]
 8002d34:	f04f 30ff 	mov.w	r0, #4294967295
 8002d38:	e0d1      	b.n	8002ede <_svfiprintf_r+0x1d2>
 8002d3a:	2340      	movs	r3, #64	; 0x40
 8002d3c:	616b      	str	r3, [r5, #20]
 8002d3e:	2300      	movs	r3, #0
 8002d40:	9309      	str	r3, [sp, #36]	; 0x24
 8002d42:	2320      	movs	r3, #32
 8002d44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d48:	2330      	movs	r3, #48	; 0x30
 8002d4a:	f04f 0901 	mov.w	r9, #1
 8002d4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d52:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002ef8 <_svfiprintf_r+0x1ec>
 8002d56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d5a:	4623      	mov	r3, r4
 8002d5c:	469a      	mov	sl, r3
 8002d5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d62:	b10a      	cbz	r2, 8002d68 <_svfiprintf_r+0x5c>
 8002d64:	2a25      	cmp	r2, #37	; 0x25
 8002d66:	d1f9      	bne.n	8002d5c <_svfiprintf_r+0x50>
 8002d68:	ebba 0b04 	subs.w	fp, sl, r4
 8002d6c:	d00b      	beq.n	8002d86 <_svfiprintf_r+0x7a>
 8002d6e:	465b      	mov	r3, fp
 8002d70:	4622      	mov	r2, r4
 8002d72:	4629      	mov	r1, r5
 8002d74:	4638      	mov	r0, r7
 8002d76:	f7ff ff6d 	bl	8002c54 <__ssputs_r>
 8002d7a:	3001      	adds	r0, #1
 8002d7c:	f000 80aa 	beq.w	8002ed4 <_svfiprintf_r+0x1c8>
 8002d80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d82:	445a      	add	r2, fp
 8002d84:	9209      	str	r2, [sp, #36]	; 0x24
 8002d86:	f89a 3000 	ldrb.w	r3, [sl]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 80a2 	beq.w	8002ed4 <_svfiprintf_r+0x1c8>
 8002d90:	2300      	movs	r3, #0
 8002d92:	f04f 32ff 	mov.w	r2, #4294967295
 8002d96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d9a:	f10a 0a01 	add.w	sl, sl, #1
 8002d9e:	9304      	str	r3, [sp, #16]
 8002da0:	9307      	str	r3, [sp, #28]
 8002da2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002da6:	931a      	str	r3, [sp, #104]	; 0x68
 8002da8:	4654      	mov	r4, sl
 8002daa:	2205      	movs	r2, #5
 8002dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002db0:	4851      	ldr	r0, [pc, #324]	; (8002ef8 <_svfiprintf_r+0x1ec>)
 8002db2:	f000 fa41 	bl	8003238 <memchr>
 8002db6:	9a04      	ldr	r2, [sp, #16]
 8002db8:	b9d8      	cbnz	r0, 8002df2 <_svfiprintf_r+0xe6>
 8002dba:	06d0      	lsls	r0, r2, #27
 8002dbc:	bf44      	itt	mi
 8002dbe:	2320      	movmi	r3, #32
 8002dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002dc4:	0711      	lsls	r1, r2, #28
 8002dc6:	bf44      	itt	mi
 8002dc8:	232b      	movmi	r3, #43	; 0x2b
 8002dca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002dce:	f89a 3000 	ldrb.w	r3, [sl]
 8002dd2:	2b2a      	cmp	r3, #42	; 0x2a
 8002dd4:	d015      	beq.n	8002e02 <_svfiprintf_r+0xf6>
 8002dd6:	4654      	mov	r4, sl
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f04f 0c0a 	mov.w	ip, #10
 8002dde:	9a07      	ldr	r2, [sp, #28]
 8002de0:	4621      	mov	r1, r4
 8002de2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002de6:	3b30      	subs	r3, #48	; 0x30
 8002de8:	2b09      	cmp	r3, #9
 8002dea:	d94e      	bls.n	8002e8a <_svfiprintf_r+0x17e>
 8002dec:	b1b0      	cbz	r0, 8002e1c <_svfiprintf_r+0x110>
 8002dee:	9207      	str	r2, [sp, #28]
 8002df0:	e014      	b.n	8002e1c <_svfiprintf_r+0x110>
 8002df2:	eba0 0308 	sub.w	r3, r0, r8
 8002df6:	fa09 f303 	lsl.w	r3, r9, r3
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	46a2      	mov	sl, r4
 8002dfe:	9304      	str	r3, [sp, #16]
 8002e00:	e7d2      	b.n	8002da8 <_svfiprintf_r+0x9c>
 8002e02:	9b03      	ldr	r3, [sp, #12]
 8002e04:	1d19      	adds	r1, r3, #4
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	9103      	str	r1, [sp, #12]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	bfbb      	ittet	lt
 8002e0e:	425b      	neglt	r3, r3
 8002e10:	f042 0202 	orrlt.w	r2, r2, #2
 8002e14:	9307      	strge	r3, [sp, #28]
 8002e16:	9307      	strlt	r3, [sp, #28]
 8002e18:	bfb8      	it	lt
 8002e1a:	9204      	strlt	r2, [sp, #16]
 8002e1c:	7823      	ldrb	r3, [r4, #0]
 8002e1e:	2b2e      	cmp	r3, #46	; 0x2e
 8002e20:	d10c      	bne.n	8002e3c <_svfiprintf_r+0x130>
 8002e22:	7863      	ldrb	r3, [r4, #1]
 8002e24:	2b2a      	cmp	r3, #42	; 0x2a
 8002e26:	d135      	bne.n	8002e94 <_svfiprintf_r+0x188>
 8002e28:	9b03      	ldr	r3, [sp, #12]
 8002e2a:	3402      	adds	r4, #2
 8002e2c:	1d1a      	adds	r2, r3, #4
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	9203      	str	r2, [sp, #12]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	bfb8      	it	lt
 8002e36:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e3a:	9305      	str	r3, [sp, #20]
 8002e3c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002efc <_svfiprintf_r+0x1f0>
 8002e40:	2203      	movs	r2, #3
 8002e42:	4650      	mov	r0, sl
 8002e44:	7821      	ldrb	r1, [r4, #0]
 8002e46:	f000 f9f7 	bl	8003238 <memchr>
 8002e4a:	b140      	cbz	r0, 8002e5e <_svfiprintf_r+0x152>
 8002e4c:	2340      	movs	r3, #64	; 0x40
 8002e4e:	eba0 000a 	sub.w	r0, r0, sl
 8002e52:	fa03 f000 	lsl.w	r0, r3, r0
 8002e56:	9b04      	ldr	r3, [sp, #16]
 8002e58:	3401      	adds	r4, #1
 8002e5a:	4303      	orrs	r3, r0
 8002e5c:	9304      	str	r3, [sp, #16]
 8002e5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e62:	2206      	movs	r2, #6
 8002e64:	4826      	ldr	r0, [pc, #152]	; (8002f00 <_svfiprintf_r+0x1f4>)
 8002e66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e6a:	f000 f9e5 	bl	8003238 <memchr>
 8002e6e:	2800      	cmp	r0, #0
 8002e70:	d038      	beq.n	8002ee4 <_svfiprintf_r+0x1d8>
 8002e72:	4b24      	ldr	r3, [pc, #144]	; (8002f04 <_svfiprintf_r+0x1f8>)
 8002e74:	bb1b      	cbnz	r3, 8002ebe <_svfiprintf_r+0x1b2>
 8002e76:	9b03      	ldr	r3, [sp, #12]
 8002e78:	3307      	adds	r3, #7
 8002e7a:	f023 0307 	bic.w	r3, r3, #7
 8002e7e:	3308      	adds	r3, #8
 8002e80:	9303      	str	r3, [sp, #12]
 8002e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e84:	4433      	add	r3, r6
 8002e86:	9309      	str	r3, [sp, #36]	; 0x24
 8002e88:	e767      	b.n	8002d5a <_svfiprintf_r+0x4e>
 8002e8a:	460c      	mov	r4, r1
 8002e8c:	2001      	movs	r0, #1
 8002e8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e92:	e7a5      	b.n	8002de0 <_svfiprintf_r+0xd4>
 8002e94:	2300      	movs	r3, #0
 8002e96:	f04f 0c0a 	mov.w	ip, #10
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	3401      	adds	r4, #1
 8002e9e:	9305      	str	r3, [sp, #20]
 8002ea0:	4620      	mov	r0, r4
 8002ea2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ea6:	3a30      	subs	r2, #48	; 0x30
 8002ea8:	2a09      	cmp	r2, #9
 8002eaa:	d903      	bls.n	8002eb4 <_svfiprintf_r+0x1a8>
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0c5      	beq.n	8002e3c <_svfiprintf_r+0x130>
 8002eb0:	9105      	str	r1, [sp, #20]
 8002eb2:	e7c3      	b.n	8002e3c <_svfiprintf_r+0x130>
 8002eb4:	4604      	mov	r4, r0
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ebc:	e7f0      	b.n	8002ea0 <_svfiprintf_r+0x194>
 8002ebe:	ab03      	add	r3, sp, #12
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	462a      	mov	r2, r5
 8002ec4:	4638      	mov	r0, r7
 8002ec6:	4b10      	ldr	r3, [pc, #64]	; (8002f08 <_svfiprintf_r+0x1fc>)
 8002ec8:	a904      	add	r1, sp, #16
 8002eca:	f3af 8000 	nop.w
 8002ece:	1c42      	adds	r2, r0, #1
 8002ed0:	4606      	mov	r6, r0
 8002ed2:	d1d6      	bne.n	8002e82 <_svfiprintf_r+0x176>
 8002ed4:	89ab      	ldrh	r3, [r5, #12]
 8002ed6:	065b      	lsls	r3, r3, #25
 8002ed8:	f53f af2c 	bmi.w	8002d34 <_svfiprintf_r+0x28>
 8002edc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ede:	b01d      	add	sp, #116	; 0x74
 8002ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ee4:	ab03      	add	r3, sp, #12
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	462a      	mov	r2, r5
 8002eea:	4638      	mov	r0, r7
 8002eec:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <_svfiprintf_r+0x1fc>)
 8002eee:	a904      	add	r1, sp, #16
 8002ef0:	f000 f87c 	bl	8002fec <_printf_i>
 8002ef4:	e7eb      	b.n	8002ece <_svfiprintf_r+0x1c2>
 8002ef6:	bf00      	nop
 8002ef8:	08003560 	.word	0x08003560
 8002efc:	08003566 	.word	0x08003566
 8002f00:	0800356a 	.word	0x0800356a
 8002f04:	00000000 	.word	0x00000000
 8002f08:	08002c55 	.word	0x08002c55

08002f0c <_printf_common>:
 8002f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f10:	4616      	mov	r6, r2
 8002f12:	4699      	mov	r9, r3
 8002f14:	688a      	ldr	r2, [r1, #8]
 8002f16:	690b      	ldr	r3, [r1, #16]
 8002f18:	4607      	mov	r7, r0
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	bfb8      	it	lt
 8002f1e:	4613      	movlt	r3, r2
 8002f20:	6033      	str	r3, [r6, #0]
 8002f22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f26:	460c      	mov	r4, r1
 8002f28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f2c:	b10a      	cbz	r2, 8002f32 <_printf_common+0x26>
 8002f2e:	3301      	adds	r3, #1
 8002f30:	6033      	str	r3, [r6, #0]
 8002f32:	6823      	ldr	r3, [r4, #0]
 8002f34:	0699      	lsls	r1, r3, #26
 8002f36:	bf42      	ittt	mi
 8002f38:	6833      	ldrmi	r3, [r6, #0]
 8002f3a:	3302      	addmi	r3, #2
 8002f3c:	6033      	strmi	r3, [r6, #0]
 8002f3e:	6825      	ldr	r5, [r4, #0]
 8002f40:	f015 0506 	ands.w	r5, r5, #6
 8002f44:	d106      	bne.n	8002f54 <_printf_common+0x48>
 8002f46:	f104 0a19 	add.w	sl, r4, #25
 8002f4a:	68e3      	ldr	r3, [r4, #12]
 8002f4c:	6832      	ldr	r2, [r6, #0]
 8002f4e:	1a9b      	subs	r3, r3, r2
 8002f50:	42ab      	cmp	r3, r5
 8002f52:	dc28      	bgt.n	8002fa6 <_printf_common+0x9a>
 8002f54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f58:	1e13      	subs	r3, r2, #0
 8002f5a:	6822      	ldr	r2, [r4, #0]
 8002f5c:	bf18      	it	ne
 8002f5e:	2301      	movne	r3, #1
 8002f60:	0692      	lsls	r2, r2, #26
 8002f62:	d42d      	bmi.n	8002fc0 <_printf_common+0xb4>
 8002f64:	4649      	mov	r1, r9
 8002f66:	4638      	mov	r0, r7
 8002f68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f6c:	47c0      	blx	r8
 8002f6e:	3001      	adds	r0, #1
 8002f70:	d020      	beq.n	8002fb4 <_printf_common+0xa8>
 8002f72:	6823      	ldr	r3, [r4, #0]
 8002f74:	68e5      	ldr	r5, [r4, #12]
 8002f76:	f003 0306 	and.w	r3, r3, #6
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	bf18      	it	ne
 8002f7e:	2500      	movne	r5, #0
 8002f80:	6832      	ldr	r2, [r6, #0]
 8002f82:	f04f 0600 	mov.w	r6, #0
 8002f86:	68a3      	ldr	r3, [r4, #8]
 8002f88:	bf08      	it	eq
 8002f8a:	1aad      	subeq	r5, r5, r2
 8002f8c:	6922      	ldr	r2, [r4, #16]
 8002f8e:	bf08      	it	eq
 8002f90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f94:	4293      	cmp	r3, r2
 8002f96:	bfc4      	itt	gt
 8002f98:	1a9b      	subgt	r3, r3, r2
 8002f9a:	18ed      	addgt	r5, r5, r3
 8002f9c:	341a      	adds	r4, #26
 8002f9e:	42b5      	cmp	r5, r6
 8002fa0:	d11a      	bne.n	8002fd8 <_printf_common+0xcc>
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	e008      	b.n	8002fb8 <_printf_common+0xac>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	4652      	mov	r2, sl
 8002faa:	4649      	mov	r1, r9
 8002fac:	4638      	mov	r0, r7
 8002fae:	47c0      	blx	r8
 8002fb0:	3001      	adds	r0, #1
 8002fb2:	d103      	bne.n	8002fbc <_printf_common+0xb0>
 8002fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fbc:	3501      	adds	r5, #1
 8002fbe:	e7c4      	b.n	8002f4a <_printf_common+0x3e>
 8002fc0:	2030      	movs	r0, #48	; 0x30
 8002fc2:	18e1      	adds	r1, r4, r3
 8002fc4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002fce:	4422      	add	r2, r4
 8002fd0:	3302      	adds	r3, #2
 8002fd2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002fd6:	e7c5      	b.n	8002f64 <_printf_common+0x58>
 8002fd8:	2301      	movs	r3, #1
 8002fda:	4622      	mov	r2, r4
 8002fdc:	4649      	mov	r1, r9
 8002fde:	4638      	mov	r0, r7
 8002fe0:	47c0      	blx	r8
 8002fe2:	3001      	adds	r0, #1
 8002fe4:	d0e6      	beq.n	8002fb4 <_printf_common+0xa8>
 8002fe6:	3601      	adds	r6, #1
 8002fe8:	e7d9      	b.n	8002f9e <_printf_common+0x92>
	...

08002fec <_printf_i>:
 8002fec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ff0:	7e0f      	ldrb	r7, [r1, #24]
 8002ff2:	4691      	mov	r9, r2
 8002ff4:	2f78      	cmp	r7, #120	; 0x78
 8002ff6:	4680      	mov	r8, r0
 8002ff8:	460c      	mov	r4, r1
 8002ffa:	469a      	mov	sl, r3
 8002ffc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002ffe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003002:	d807      	bhi.n	8003014 <_printf_i+0x28>
 8003004:	2f62      	cmp	r7, #98	; 0x62
 8003006:	d80a      	bhi.n	800301e <_printf_i+0x32>
 8003008:	2f00      	cmp	r7, #0
 800300a:	f000 80d9 	beq.w	80031c0 <_printf_i+0x1d4>
 800300e:	2f58      	cmp	r7, #88	; 0x58
 8003010:	f000 80a4 	beq.w	800315c <_printf_i+0x170>
 8003014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003018:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800301c:	e03a      	b.n	8003094 <_printf_i+0xa8>
 800301e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003022:	2b15      	cmp	r3, #21
 8003024:	d8f6      	bhi.n	8003014 <_printf_i+0x28>
 8003026:	a101      	add	r1, pc, #4	; (adr r1, 800302c <_printf_i+0x40>)
 8003028:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800302c:	08003085 	.word	0x08003085
 8003030:	08003099 	.word	0x08003099
 8003034:	08003015 	.word	0x08003015
 8003038:	08003015 	.word	0x08003015
 800303c:	08003015 	.word	0x08003015
 8003040:	08003015 	.word	0x08003015
 8003044:	08003099 	.word	0x08003099
 8003048:	08003015 	.word	0x08003015
 800304c:	08003015 	.word	0x08003015
 8003050:	08003015 	.word	0x08003015
 8003054:	08003015 	.word	0x08003015
 8003058:	080031a7 	.word	0x080031a7
 800305c:	080030c9 	.word	0x080030c9
 8003060:	08003189 	.word	0x08003189
 8003064:	08003015 	.word	0x08003015
 8003068:	08003015 	.word	0x08003015
 800306c:	080031c9 	.word	0x080031c9
 8003070:	08003015 	.word	0x08003015
 8003074:	080030c9 	.word	0x080030c9
 8003078:	08003015 	.word	0x08003015
 800307c:	08003015 	.word	0x08003015
 8003080:	08003191 	.word	0x08003191
 8003084:	682b      	ldr	r3, [r5, #0]
 8003086:	1d1a      	adds	r2, r3, #4
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	602a      	str	r2, [r5, #0]
 800308c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003090:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003094:	2301      	movs	r3, #1
 8003096:	e0a4      	b.n	80031e2 <_printf_i+0x1f6>
 8003098:	6820      	ldr	r0, [r4, #0]
 800309a:	6829      	ldr	r1, [r5, #0]
 800309c:	0606      	lsls	r6, r0, #24
 800309e:	f101 0304 	add.w	r3, r1, #4
 80030a2:	d50a      	bpl.n	80030ba <_printf_i+0xce>
 80030a4:	680e      	ldr	r6, [r1, #0]
 80030a6:	602b      	str	r3, [r5, #0]
 80030a8:	2e00      	cmp	r6, #0
 80030aa:	da03      	bge.n	80030b4 <_printf_i+0xc8>
 80030ac:	232d      	movs	r3, #45	; 0x2d
 80030ae:	4276      	negs	r6, r6
 80030b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030b4:	230a      	movs	r3, #10
 80030b6:	485e      	ldr	r0, [pc, #376]	; (8003230 <_printf_i+0x244>)
 80030b8:	e019      	b.n	80030ee <_printf_i+0x102>
 80030ba:	680e      	ldr	r6, [r1, #0]
 80030bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80030c0:	602b      	str	r3, [r5, #0]
 80030c2:	bf18      	it	ne
 80030c4:	b236      	sxthne	r6, r6
 80030c6:	e7ef      	b.n	80030a8 <_printf_i+0xbc>
 80030c8:	682b      	ldr	r3, [r5, #0]
 80030ca:	6820      	ldr	r0, [r4, #0]
 80030cc:	1d19      	adds	r1, r3, #4
 80030ce:	6029      	str	r1, [r5, #0]
 80030d0:	0601      	lsls	r1, r0, #24
 80030d2:	d501      	bpl.n	80030d8 <_printf_i+0xec>
 80030d4:	681e      	ldr	r6, [r3, #0]
 80030d6:	e002      	b.n	80030de <_printf_i+0xf2>
 80030d8:	0646      	lsls	r6, r0, #25
 80030da:	d5fb      	bpl.n	80030d4 <_printf_i+0xe8>
 80030dc:	881e      	ldrh	r6, [r3, #0]
 80030de:	2f6f      	cmp	r7, #111	; 0x6f
 80030e0:	bf0c      	ite	eq
 80030e2:	2308      	moveq	r3, #8
 80030e4:	230a      	movne	r3, #10
 80030e6:	4852      	ldr	r0, [pc, #328]	; (8003230 <_printf_i+0x244>)
 80030e8:	2100      	movs	r1, #0
 80030ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80030ee:	6865      	ldr	r5, [r4, #4]
 80030f0:	2d00      	cmp	r5, #0
 80030f2:	bfa8      	it	ge
 80030f4:	6821      	ldrge	r1, [r4, #0]
 80030f6:	60a5      	str	r5, [r4, #8]
 80030f8:	bfa4      	itt	ge
 80030fa:	f021 0104 	bicge.w	r1, r1, #4
 80030fe:	6021      	strge	r1, [r4, #0]
 8003100:	b90e      	cbnz	r6, 8003106 <_printf_i+0x11a>
 8003102:	2d00      	cmp	r5, #0
 8003104:	d04d      	beq.n	80031a2 <_printf_i+0x1b6>
 8003106:	4615      	mov	r5, r2
 8003108:	fbb6 f1f3 	udiv	r1, r6, r3
 800310c:	fb03 6711 	mls	r7, r3, r1, r6
 8003110:	5dc7      	ldrb	r7, [r0, r7]
 8003112:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003116:	4637      	mov	r7, r6
 8003118:	42bb      	cmp	r3, r7
 800311a:	460e      	mov	r6, r1
 800311c:	d9f4      	bls.n	8003108 <_printf_i+0x11c>
 800311e:	2b08      	cmp	r3, #8
 8003120:	d10b      	bne.n	800313a <_printf_i+0x14e>
 8003122:	6823      	ldr	r3, [r4, #0]
 8003124:	07de      	lsls	r6, r3, #31
 8003126:	d508      	bpl.n	800313a <_printf_i+0x14e>
 8003128:	6923      	ldr	r3, [r4, #16]
 800312a:	6861      	ldr	r1, [r4, #4]
 800312c:	4299      	cmp	r1, r3
 800312e:	bfde      	ittt	le
 8003130:	2330      	movle	r3, #48	; 0x30
 8003132:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003136:	f105 35ff 	addle.w	r5, r5, #4294967295
 800313a:	1b52      	subs	r2, r2, r5
 800313c:	6122      	str	r2, [r4, #16]
 800313e:	464b      	mov	r3, r9
 8003140:	4621      	mov	r1, r4
 8003142:	4640      	mov	r0, r8
 8003144:	f8cd a000 	str.w	sl, [sp]
 8003148:	aa03      	add	r2, sp, #12
 800314a:	f7ff fedf 	bl	8002f0c <_printf_common>
 800314e:	3001      	adds	r0, #1
 8003150:	d14c      	bne.n	80031ec <_printf_i+0x200>
 8003152:	f04f 30ff 	mov.w	r0, #4294967295
 8003156:	b004      	add	sp, #16
 8003158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800315c:	4834      	ldr	r0, [pc, #208]	; (8003230 <_printf_i+0x244>)
 800315e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003162:	6829      	ldr	r1, [r5, #0]
 8003164:	6823      	ldr	r3, [r4, #0]
 8003166:	f851 6b04 	ldr.w	r6, [r1], #4
 800316a:	6029      	str	r1, [r5, #0]
 800316c:	061d      	lsls	r5, r3, #24
 800316e:	d514      	bpl.n	800319a <_printf_i+0x1ae>
 8003170:	07df      	lsls	r7, r3, #31
 8003172:	bf44      	itt	mi
 8003174:	f043 0320 	orrmi.w	r3, r3, #32
 8003178:	6023      	strmi	r3, [r4, #0]
 800317a:	b91e      	cbnz	r6, 8003184 <_printf_i+0x198>
 800317c:	6823      	ldr	r3, [r4, #0]
 800317e:	f023 0320 	bic.w	r3, r3, #32
 8003182:	6023      	str	r3, [r4, #0]
 8003184:	2310      	movs	r3, #16
 8003186:	e7af      	b.n	80030e8 <_printf_i+0xfc>
 8003188:	6823      	ldr	r3, [r4, #0]
 800318a:	f043 0320 	orr.w	r3, r3, #32
 800318e:	6023      	str	r3, [r4, #0]
 8003190:	2378      	movs	r3, #120	; 0x78
 8003192:	4828      	ldr	r0, [pc, #160]	; (8003234 <_printf_i+0x248>)
 8003194:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003198:	e7e3      	b.n	8003162 <_printf_i+0x176>
 800319a:	0659      	lsls	r1, r3, #25
 800319c:	bf48      	it	mi
 800319e:	b2b6      	uxthmi	r6, r6
 80031a0:	e7e6      	b.n	8003170 <_printf_i+0x184>
 80031a2:	4615      	mov	r5, r2
 80031a4:	e7bb      	b.n	800311e <_printf_i+0x132>
 80031a6:	682b      	ldr	r3, [r5, #0]
 80031a8:	6826      	ldr	r6, [r4, #0]
 80031aa:	1d18      	adds	r0, r3, #4
 80031ac:	6961      	ldr	r1, [r4, #20]
 80031ae:	6028      	str	r0, [r5, #0]
 80031b0:	0635      	lsls	r5, r6, #24
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	d501      	bpl.n	80031ba <_printf_i+0x1ce>
 80031b6:	6019      	str	r1, [r3, #0]
 80031b8:	e002      	b.n	80031c0 <_printf_i+0x1d4>
 80031ba:	0670      	lsls	r0, r6, #25
 80031bc:	d5fb      	bpl.n	80031b6 <_printf_i+0x1ca>
 80031be:	8019      	strh	r1, [r3, #0]
 80031c0:	2300      	movs	r3, #0
 80031c2:	4615      	mov	r5, r2
 80031c4:	6123      	str	r3, [r4, #16]
 80031c6:	e7ba      	b.n	800313e <_printf_i+0x152>
 80031c8:	682b      	ldr	r3, [r5, #0]
 80031ca:	2100      	movs	r1, #0
 80031cc:	1d1a      	adds	r2, r3, #4
 80031ce:	602a      	str	r2, [r5, #0]
 80031d0:	681d      	ldr	r5, [r3, #0]
 80031d2:	6862      	ldr	r2, [r4, #4]
 80031d4:	4628      	mov	r0, r5
 80031d6:	f000 f82f 	bl	8003238 <memchr>
 80031da:	b108      	cbz	r0, 80031e0 <_printf_i+0x1f4>
 80031dc:	1b40      	subs	r0, r0, r5
 80031de:	6060      	str	r0, [r4, #4]
 80031e0:	6863      	ldr	r3, [r4, #4]
 80031e2:	6123      	str	r3, [r4, #16]
 80031e4:	2300      	movs	r3, #0
 80031e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031ea:	e7a8      	b.n	800313e <_printf_i+0x152>
 80031ec:	462a      	mov	r2, r5
 80031ee:	4649      	mov	r1, r9
 80031f0:	4640      	mov	r0, r8
 80031f2:	6923      	ldr	r3, [r4, #16]
 80031f4:	47d0      	blx	sl
 80031f6:	3001      	adds	r0, #1
 80031f8:	d0ab      	beq.n	8003152 <_printf_i+0x166>
 80031fa:	6823      	ldr	r3, [r4, #0]
 80031fc:	079b      	lsls	r3, r3, #30
 80031fe:	d413      	bmi.n	8003228 <_printf_i+0x23c>
 8003200:	68e0      	ldr	r0, [r4, #12]
 8003202:	9b03      	ldr	r3, [sp, #12]
 8003204:	4298      	cmp	r0, r3
 8003206:	bfb8      	it	lt
 8003208:	4618      	movlt	r0, r3
 800320a:	e7a4      	b.n	8003156 <_printf_i+0x16a>
 800320c:	2301      	movs	r3, #1
 800320e:	4632      	mov	r2, r6
 8003210:	4649      	mov	r1, r9
 8003212:	4640      	mov	r0, r8
 8003214:	47d0      	blx	sl
 8003216:	3001      	adds	r0, #1
 8003218:	d09b      	beq.n	8003152 <_printf_i+0x166>
 800321a:	3501      	adds	r5, #1
 800321c:	68e3      	ldr	r3, [r4, #12]
 800321e:	9903      	ldr	r1, [sp, #12]
 8003220:	1a5b      	subs	r3, r3, r1
 8003222:	42ab      	cmp	r3, r5
 8003224:	dcf2      	bgt.n	800320c <_printf_i+0x220>
 8003226:	e7eb      	b.n	8003200 <_printf_i+0x214>
 8003228:	2500      	movs	r5, #0
 800322a:	f104 0619 	add.w	r6, r4, #25
 800322e:	e7f5      	b.n	800321c <_printf_i+0x230>
 8003230:	08003571 	.word	0x08003571
 8003234:	08003582 	.word	0x08003582

08003238 <memchr>:
 8003238:	4603      	mov	r3, r0
 800323a:	b510      	push	{r4, lr}
 800323c:	b2c9      	uxtb	r1, r1
 800323e:	4402      	add	r2, r0
 8003240:	4293      	cmp	r3, r2
 8003242:	4618      	mov	r0, r3
 8003244:	d101      	bne.n	800324a <memchr+0x12>
 8003246:	2000      	movs	r0, #0
 8003248:	e003      	b.n	8003252 <memchr+0x1a>
 800324a:	7804      	ldrb	r4, [r0, #0]
 800324c:	3301      	adds	r3, #1
 800324e:	428c      	cmp	r4, r1
 8003250:	d1f6      	bne.n	8003240 <memchr+0x8>
 8003252:	bd10      	pop	{r4, pc}

08003254 <memcpy>:
 8003254:	440a      	add	r2, r1
 8003256:	4291      	cmp	r1, r2
 8003258:	f100 33ff 	add.w	r3, r0, #4294967295
 800325c:	d100      	bne.n	8003260 <memcpy+0xc>
 800325e:	4770      	bx	lr
 8003260:	b510      	push	{r4, lr}
 8003262:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003266:	4291      	cmp	r1, r2
 8003268:	f803 4f01 	strb.w	r4, [r3, #1]!
 800326c:	d1f9      	bne.n	8003262 <memcpy+0xe>
 800326e:	bd10      	pop	{r4, pc}

08003270 <memmove>:
 8003270:	4288      	cmp	r0, r1
 8003272:	b510      	push	{r4, lr}
 8003274:	eb01 0402 	add.w	r4, r1, r2
 8003278:	d902      	bls.n	8003280 <memmove+0x10>
 800327a:	4284      	cmp	r4, r0
 800327c:	4623      	mov	r3, r4
 800327e:	d807      	bhi.n	8003290 <memmove+0x20>
 8003280:	1e43      	subs	r3, r0, #1
 8003282:	42a1      	cmp	r1, r4
 8003284:	d008      	beq.n	8003298 <memmove+0x28>
 8003286:	f811 2b01 	ldrb.w	r2, [r1], #1
 800328a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800328e:	e7f8      	b.n	8003282 <memmove+0x12>
 8003290:	4601      	mov	r1, r0
 8003292:	4402      	add	r2, r0
 8003294:	428a      	cmp	r2, r1
 8003296:	d100      	bne.n	800329a <memmove+0x2a>
 8003298:	bd10      	pop	{r4, pc}
 800329a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800329e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80032a2:	e7f7      	b.n	8003294 <memmove+0x24>

080032a4 <_free_r>:
 80032a4:	b538      	push	{r3, r4, r5, lr}
 80032a6:	4605      	mov	r5, r0
 80032a8:	2900      	cmp	r1, #0
 80032aa:	d040      	beq.n	800332e <_free_r+0x8a>
 80032ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032b0:	1f0c      	subs	r4, r1, #4
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	bfb8      	it	lt
 80032b6:	18e4      	addlt	r4, r4, r3
 80032b8:	f000 f910 	bl	80034dc <__malloc_lock>
 80032bc:	4a1c      	ldr	r2, [pc, #112]	; (8003330 <_free_r+0x8c>)
 80032be:	6813      	ldr	r3, [r2, #0]
 80032c0:	b933      	cbnz	r3, 80032d0 <_free_r+0x2c>
 80032c2:	6063      	str	r3, [r4, #4]
 80032c4:	6014      	str	r4, [r2, #0]
 80032c6:	4628      	mov	r0, r5
 80032c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032cc:	f000 b90c 	b.w	80034e8 <__malloc_unlock>
 80032d0:	42a3      	cmp	r3, r4
 80032d2:	d908      	bls.n	80032e6 <_free_r+0x42>
 80032d4:	6820      	ldr	r0, [r4, #0]
 80032d6:	1821      	adds	r1, r4, r0
 80032d8:	428b      	cmp	r3, r1
 80032da:	bf01      	itttt	eq
 80032dc:	6819      	ldreq	r1, [r3, #0]
 80032de:	685b      	ldreq	r3, [r3, #4]
 80032e0:	1809      	addeq	r1, r1, r0
 80032e2:	6021      	streq	r1, [r4, #0]
 80032e4:	e7ed      	b.n	80032c2 <_free_r+0x1e>
 80032e6:	461a      	mov	r2, r3
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	b10b      	cbz	r3, 80032f0 <_free_r+0x4c>
 80032ec:	42a3      	cmp	r3, r4
 80032ee:	d9fa      	bls.n	80032e6 <_free_r+0x42>
 80032f0:	6811      	ldr	r1, [r2, #0]
 80032f2:	1850      	adds	r0, r2, r1
 80032f4:	42a0      	cmp	r0, r4
 80032f6:	d10b      	bne.n	8003310 <_free_r+0x6c>
 80032f8:	6820      	ldr	r0, [r4, #0]
 80032fa:	4401      	add	r1, r0
 80032fc:	1850      	adds	r0, r2, r1
 80032fe:	4283      	cmp	r3, r0
 8003300:	6011      	str	r1, [r2, #0]
 8003302:	d1e0      	bne.n	80032c6 <_free_r+0x22>
 8003304:	6818      	ldr	r0, [r3, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	4401      	add	r1, r0
 800330a:	6011      	str	r1, [r2, #0]
 800330c:	6053      	str	r3, [r2, #4]
 800330e:	e7da      	b.n	80032c6 <_free_r+0x22>
 8003310:	d902      	bls.n	8003318 <_free_r+0x74>
 8003312:	230c      	movs	r3, #12
 8003314:	602b      	str	r3, [r5, #0]
 8003316:	e7d6      	b.n	80032c6 <_free_r+0x22>
 8003318:	6820      	ldr	r0, [r4, #0]
 800331a:	1821      	adds	r1, r4, r0
 800331c:	428b      	cmp	r3, r1
 800331e:	bf01      	itttt	eq
 8003320:	6819      	ldreq	r1, [r3, #0]
 8003322:	685b      	ldreq	r3, [r3, #4]
 8003324:	1809      	addeq	r1, r1, r0
 8003326:	6021      	streq	r1, [r4, #0]
 8003328:	6063      	str	r3, [r4, #4]
 800332a:	6054      	str	r4, [r2, #4]
 800332c:	e7cb      	b.n	80032c6 <_free_r+0x22>
 800332e:	bd38      	pop	{r3, r4, r5, pc}
 8003330:	200001a0 	.word	0x200001a0

08003334 <sbrk_aligned>:
 8003334:	b570      	push	{r4, r5, r6, lr}
 8003336:	4e0e      	ldr	r6, [pc, #56]	; (8003370 <sbrk_aligned+0x3c>)
 8003338:	460c      	mov	r4, r1
 800333a:	6831      	ldr	r1, [r6, #0]
 800333c:	4605      	mov	r5, r0
 800333e:	b911      	cbnz	r1, 8003346 <sbrk_aligned+0x12>
 8003340:	f000 f8bc 	bl	80034bc <_sbrk_r>
 8003344:	6030      	str	r0, [r6, #0]
 8003346:	4621      	mov	r1, r4
 8003348:	4628      	mov	r0, r5
 800334a:	f000 f8b7 	bl	80034bc <_sbrk_r>
 800334e:	1c43      	adds	r3, r0, #1
 8003350:	d00a      	beq.n	8003368 <sbrk_aligned+0x34>
 8003352:	1cc4      	adds	r4, r0, #3
 8003354:	f024 0403 	bic.w	r4, r4, #3
 8003358:	42a0      	cmp	r0, r4
 800335a:	d007      	beq.n	800336c <sbrk_aligned+0x38>
 800335c:	1a21      	subs	r1, r4, r0
 800335e:	4628      	mov	r0, r5
 8003360:	f000 f8ac 	bl	80034bc <_sbrk_r>
 8003364:	3001      	adds	r0, #1
 8003366:	d101      	bne.n	800336c <sbrk_aligned+0x38>
 8003368:	f04f 34ff 	mov.w	r4, #4294967295
 800336c:	4620      	mov	r0, r4
 800336e:	bd70      	pop	{r4, r5, r6, pc}
 8003370:	200001a4 	.word	0x200001a4

08003374 <_malloc_r>:
 8003374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003378:	1ccd      	adds	r5, r1, #3
 800337a:	f025 0503 	bic.w	r5, r5, #3
 800337e:	3508      	adds	r5, #8
 8003380:	2d0c      	cmp	r5, #12
 8003382:	bf38      	it	cc
 8003384:	250c      	movcc	r5, #12
 8003386:	2d00      	cmp	r5, #0
 8003388:	4607      	mov	r7, r0
 800338a:	db01      	blt.n	8003390 <_malloc_r+0x1c>
 800338c:	42a9      	cmp	r1, r5
 800338e:	d905      	bls.n	800339c <_malloc_r+0x28>
 8003390:	230c      	movs	r3, #12
 8003392:	2600      	movs	r6, #0
 8003394:	603b      	str	r3, [r7, #0]
 8003396:	4630      	mov	r0, r6
 8003398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800339c:	4e2e      	ldr	r6, [pc, #184]	; (8003458 <_malloc_r+0xe4>)
 800339e:	f000 f89d 	bl	80034dc <__malloc_lock>
 80033a2:	6833      	ldr	r3, [r6, #0]
 80033a4:	461c      	mov	r4, r3
 80033a6:	bb34      	cbnz	r4, 80033f6 <_malloc_r+0x82>
 80033a8:	4629      	mov	r1, r5
 80033aa:	4638      	mov	r0, r7
 80033ac:	f7ff ffc2 	bl	8003334 <sbrk_aligned>
 80033b0:	1c43      	adds	r3, r0, #1
 80033b2:	4604      	mov	r4, r0
 80033b4:	d14d      	bne.n	8003452 <_malloc_r+0xde>
 80033b6:	6834      	ldr	r4, [r6, #0]
 80033b8:	4626      	mov	r6, r4
 80033ba:	2e00      	cmp	r6, #0
 80033bc:	d140      	bne.n	8003440 <_malloc_r+0xcc>
 80033be:	6823      	ldr	r3, [r4, #0]
 80033c0:	4631      	mov	r1, r6
 80033c2:	4638      	mov	r0, r7
 80033c4:	eb04 0803 	add.w	r8, r4, r3
 80033c8:	f000 f878 	bl	80034bc <_sbrk_r>
 80033cc:	4580      	cmp	r8, r0
 80033ce:	d13a      	bne.n	8003446 <_malloc_r+0xd2>
 80033d0:	6821      	ldr	r1, [r4, #0]
 80033d2:	3503      	adds	r5, #3
 80033d4:	1a6d      	subs	r5, r5, r1
 80033d6:	f025 0503 	bic.w	r5, r5, #3
 80033da:	3508      	adds	r5, #8
 80033dc:	2d0c      	cmp	r5, #12
 80033de:	bf38      	it	cc
 80033e0:	250c      	movcc	r5, #12
 80033e2:	4638      	mov	r0, r7
 80033e4:	4629      	mov	r1, r5
 80033e6:	f7ff ffa5 	bl	8003334 <sbrk_aligned>
 80033ea:	3001      	adds	r0, #1
 80033ec:	d02b      	beq.n	8003446 <_malloc_r+0xd2>
 80033ee:	6823      	ldr	r3, [r4, #0]
 80033f0:	442b      	add	r3, r5
 80033f2:	6023      	str	r3, [r4, #0]
 80033f4:	e00e      	b.n	8003414 <_malloc_r+0xa0>
 80033f6:	6822      	ldr	r2, [r4, #0]
 80033f8:	1b52      	subs	r2, r2, r5
 80033fa:	d41e      	bmi.n	800343a <_malloc_r+0xc6>
 80033fc:	2a0b      	cmp	r2, #11
 80033fe:	d916      	bls.n	800342e <_malloc_r+0xba>
 8003400:	1961      	adds	r1, r4, r5
 8003402:	42a3      	cmp	r3, r4
 8003404:	6025      	str	r5, [r4, #0]
 8003406:	bf18      	it	ne
 8003408:	6059      	strne	r1, [r3, #4]
 800340a:	6863      	ldr	r3, [r4, #4]
 800340c:	bf08      	it	eq
 800340e:	6031      	streq	r1, [r6, #0]
 8003410:	5162      	str	r2, [r4, r5]
 8003412:	604b      	str	r3, [r1, #4]
 8003414:	4638      	mov	r0, r7
 8003416:	f104 060b 	add.w	r6, r4, #11
 800341a:	f000 f865 	bl	80034e8 <__malloc_unlock>
 800341e:	f026 0607 	bic.w	r6, r6, #7
 8003422:	1d23      	adds	r3, r4, #4
 8003424:	1af2      	subs	r2, r6, r3
 8003426:	d0b6      	beq.n	8003396 <_malloc_r+0x22>
 8003428:	1b9b      	subs	r3, r3, r6
 800342a:	50a3      	str	r3, [r4, r2]
 800342c:	e7b3      	b.n	8003396 <_malloc_r+0x22>
 800342e:	6862      	ldr	r2, [r4, #4]
 8003430:	42a3      	cmp	r3, r4
 8003432:	bf0c      	ite	eq
 8003434:	6032      	streq	r2, [r6, #0]
 8003436:	605a      	strne	r2, [r3, #4]
 8003438:	e7ec      	b.n	8003414 <_malloc_r+0xa0>
 800343a:	4623      	mov	r3, r4
 800343c:	6864      	ldr	r4, [r4, #4]
 800343e:	e7b2      	b.n	80033a6 <_malloc_r+0x32>
 8003440:	4634      	mov	r4, r6
 8003442:	6876      	ldr	r6, [r6, #4]
 8003444:	e7b9      	b.n	80033ba <_malloc_r+0x46>
 8003446:	230c      	movs	r3, #12
 8003448:	4638      	mov	r0, r7
 800344a:	603b      	str	r3, [r7, #0]
 800344c:	f000 f84c 	bl	80034e8 <__malloc_unlock>
 8003450:	e7a1      	b.n	8003396 <_malloc_r+0x22>
 8003452:	6025      	str	r5, [r4, #0]
 8003454:	e7de      	b.n	8003414 <_malloc_r+0xa0>
 8003456:	bf00      	nop
 8003458:	200001a0 	.word	0x200001a0

0800345c <_realloc_r>:
 800345c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003460:	4680      	mov	r8, r0
 8003462:	4614      	mov	r4, r2
 8003464:	460e      	mov	r6, r1
 8003466:	b921      	cbnz	r1, 8003472 <_realloc_r+0x16>
 8003468:	4611      	mov	r1, r2
 800346a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800346e:	f7ff bf81 	b.w	8003374 <_malloc_r>
 8003472:	b92a      	cbnz	r2, 8003480 <_realloc_r+0x24>
 8003474:	f7ff ff16 	bl	80032a4 <_free_r>
 8003478:	4625      	mov	r5, r4
 800347a:	4628      	mov	r0, r5
 800347c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003480:	f000 f838 	bl	80034f4 <_malloc_usable_size_r>
 8003484:	4284      	cmp	r4, r0
 8003486:	4607      	mov	r7, r0
 8003488:	d802      	bhi.n	8003490 <_realloc_r+0x34>
 800348a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800348e:	d812      	bhi.n	80034b6 <_realloc_r+0x5a>
 8003490:	4621      	mov	r1, r4
 8003492:	4640      	mov	r0, r8
 8003494:	f7ff ff6e 	bl	8003374 <_malloc_r>
 8003498:	4605      	mov	r5, r0
 800349a:	2800      	cmp	r0, #0
 800349c:	d0ed      	beq.n	800347a <_realloc_r+0x1e>
 800349e:	42bc      	cmp	r4, r7
 80034a0:	4622      	mov	r2, r4
 80034a2:	4631      	mov	r1, r6
 80034a4:	bf28      	it	cs
 80034a6:	463a      	movcs	r2, r7
 80034a8:	f7ff fed4 	bl	8003254 <memcpy>
 80034ac:	4631      	mov	r1, r6
 80034ae:	4640      	mov	r0, r8
 80034b0:	f7ff fef8 	bl	80032a4 <_free_r>
 80034b4:	e7e1      	b.n	800347a <_realloc_r+0x1e>
 80034b6:	4635      	mov	r5, r6
 80034b8:	e7df      	b.n	800347a <_realloc_r+0x1e>
	...

080034bc <_sbrk_r>:
 80034bc:	b538      	push	{r3, r4, r5, lr}
 80034be:	2300      	movs	r3, #0
 80034c0:	4d05      	ldr	r5, [pc, #20]	; (80034d8 <_sbrk_r+0x1c>)
 80034c2:	4604      	mov	r4, r0
 80034c4:	4608      	mov	r0, r1
 80034c6:	602b      	str	r3, [r5, #0]
 80034c8:	f7fd fd04 	bl	8000ed4 <_sbrk>
 80034cc:	1c43      	adds	r3, r0, #1
 80034ce:	d102      	bne.n	80034d6 <_sbrk_r+0x1a>
 80034d0:	682b      	ldr	r3, [r5, #0]
 80034d2:	b103      	cbz	r3, 80034d6 <_sbrk_r+0x1a>
 80034d4:	6023      	str	r3, [r4, #0]
 80034d6:	bd38      	pop	{r3, r4, r5, pc}
 80034d8:	200001a8 	.word	0x200001a8

080034dc <__malloc_lock>:
 80034dc:	4801      	ldr	r0, [pc, #4]	; (80034e4 <__malloc_lock+0x8>)
 80034de:	f000 b811 	b.w	8003504 <__retarget_lock_acquire_recursive>
 80034e2:	bf00      	nop
 80034e4:	200001ac 	.word	0x200001ac

080034e8 <__malloc_unlock>:
 80034e8:	4801      	ldr	r0, [pc, #4]	; (80034f0 <__malloc_unlock+0x8>)
 80034ea:	f000 b80c 	b.w	8003506 <__retarget_lock_release_recursive>
 80034ee:	bf00      	nop
 80034f0:	200001ac 	.word	0x200001ac

080034f4 <_malloc_usable_size_r>:
 80034f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034f8:	1f18      	subs	r0, r3, #4
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	bfbc      	itt	lt
 80034fe:	580b      	ldrlt	r3, [r1, r0]
 8003500:	18c0      	addlt	r0, r0, r3
 8003502:	4770      	bx	lr

08003504 <__retarget_lock_acquire_recursive>:
 8003504:	4770      	bx	lr

08003506 <__retarget_lock_release_recursive>:
 8003506:	4770      	bx	lr

08003508 <_init>:
 8003508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800350a:	bf00      	nop
 800350c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800350e:	bc08      	pop	{r3}
 8003510:	469e      	mov	lr, r3
 8003512:	4770      	bx	lr

08003514 <_fini>:
 8003514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003516:	bf00      	nop
 8003518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800351a:	bc08      	pop	{r3}
 800351c:	469e      	mov	lr, r3
 800351e:	4770      	bx	lr
